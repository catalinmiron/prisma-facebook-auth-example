# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Date implements Node {
  id: ID!
  inviter(where: UserWhereInput): User!
  invitee(where: UserWhereInput): User!
  place(where: PlaceWhereInput): Place
  status: DATE_STATUS!
  createdAt: DateTime!
  isPaying: Boolean
  seen: Boolean!
  isCommonPlace: Boolean
  requestingChat: Boolean!
  inviterReadMessage: Boolean!
  inviteeReadMessage: Boolean!
}

type Location implements Node {
  id: ID!
  lat: Float!
  lng: Float!
  createdAt: DateTime!
  city: String
  country: String
}

type Message implements Node {
  id: ID!
  createdAt: DateTime!
  from(where: UserWhereInput): User!
  to(where: UserWhereInput): User!
  deliveredAt: DateTime!
  readAt: DateTime!
  date(where: DateWhereInput): Date
}

type NotificationSettings implements Node {
  id: ID!
  user(where: UserWhereInput): User!
  createdAt: DateTime!
  onInvite: Boolean!
  onMessage: Boolean!
  onGeneral: Boolean!
  onWink: Boolean!
  onWinkConfirmation: Boolean!
}

type Place implements Node {
  id: ID!
  name: String!
  priceRating: Int
  location(where: LocationWhereInput): Location!
  googlePlacesId: String!
  createdAt: DateTime!
  weight: Int!
  website: String
  phone: String
  address: String
  openingHours: [String!]
  types: [String!]
  fromGoogle: Boolean
  state: String
  lastGoogleUpdate: DateTime
  curatedFields: [String!]
  description: String
  detailsFetched: Boolean!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type User implements Node {
  id: ID!
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  education(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Education!]
  work(where: WorkWhereInput, orderBy: WorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Work!]
  email: String
  gender: GENDER!
  targetGenders: [GENDER!]
  photos(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Photo!]
  bio: String
  location(where: LocationWhereInput): Location
  lastLogin: DateTime!
  distanceFilter: Int
  ageFilter(where: AgeFilterWhereInput): AgeFilter
  oneSignalId: String
  notificationSettings(where: NotificationSettingsWhereInput): NotificationSettings
  createdAt: DateTime!
  onboarding: Boolean!
  hideAge: Boolean!
  language: LANGUAGES!
  places(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Place!]
  reported(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  uninterested(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  sentMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  receivedMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  sentDates(where: DateWhereInput, orderBy: DateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Date!]
  receivedDates(where: DateWhereInput, orderBy: DateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Date!]
}


#
# Other Types
#

type AgeFilter {
  min: Int!
  max: Int!
}

type AgeFilterConnection {
  pageInfo: PageInfo!
  edges: [AgeFilterEdge]!
  aggregate: AggregateAgeFilter!
}

input AgeFilterCreateInput {
  min: Int!
  max: Int!
}

input AgeFilterCreateOneInput {
  create: AgeFilterCreateInput
}

type AgeFilterEdge {
  node: AgeFilter!
  cursor: String!
}

enum AgeFilterOrderByInput {
  min_ASC
  min_DESC
  max_ASC
  max_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AgeFilterPreviousValues {
  min: Int!
  max: Int!
}

type AgeFilterSubscriptionPayload {
  mutation: MutationType!
  node: AgeFilter
  updatedFields: [String!]
  previousValues: AgeFilterPreviousValues
}

input AgeFilterSubscriptionWhereInput {
  AND: [AgeFilterSubscriptionWhereInput!]
  OR: [AgeFilterSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AgeFilterWhereInput
}

input AgeFilterUpdateInput {
  min: Int
  max: Int
}

input AgeFilterUpdateOneInput {
  create: AgeFilterCreateInput
}

input AgeFilterWhereInput {
  AND: [AgeFilterWhereInput!]
  OR: [AgeFilterWhereInput!]
  min: Int
  min_not: Int
  min_in: [Int!]
  min_not_in: [Int!]
  min_lt: Int
  min_lte: Int
  min_gt: Int
  min_gte: Int
  max: Int
  max_not: Int
  max_in: [Int!]
  max_not_in: [Int!]
  max_lt: Int
  max_lte: Int
  max_gt: Int
  max_gte: Int
}

type AggregateAgeFilter {
  count: Int!
}

type AggregateDate {
  count: Int!
}

type AggregateEducation {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateNotificationSettings {
  count: Int!
}

type AggregatePhoto {
  count: Int!
}

type AggregatePlace {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWork {
  count: Int!
}

type BatchPayload {
  count: Long!
}

enum DATE_STATUS {
  PENDING
  ACCEPTED
  REFUSED
}

type DateConnection {
  pageInfo: PageInfo!
  edges: [DateEdge]!
  aggregate: AggregateDate!
}

input DateCreateInput {
  status: DATE_STATUS
  isPaying: Boolean
  seen: Boolean
  isCommonPlace: Boolean
  requestingChat: Boolean
  inviterReadMessage: Boolean
  inviteeReadMessage: Boolean
  inviter: UserCreateOneWithoutSentDatesInput!
  invitee: UserCreateOneWithoutReceivedDatesInput!
  place: PlaceCreateOneInput
}

input DateCreateManyWithoutInviteeInput {
  create: [DateCreateWithoutInviteeInput!]
  connect: [DateWhereUniqueInput!]
}

input DateCreateManyWithoutInviterInput {
  create: [DateCreateWithoutInviterInput!]
  connect: [DateWhereUniqueInput!]
}

input DateCreateOneInput {
  create: DateCreateInput
  connect: DateWhereUniqueInput
}

input DateCreateWithoutInviteeInput {
  status: DATE_STATUS
  isPaying: Boolean
  seen: Boolean
  isCommonPlace: Boolean
  requestingChat: Boolean
  inviterReadMessage: Boolean
  inviteeReadMessage: Boolean
  inviter: UserCreateOneWithoutSentDatesInput!
  place: PlaceCreateOneInput
}

input DateCreateWithoutInviterInput {
  status: DATE_STATUS
  isPaying: Boolean
  seen: Boolean
  isCommonPlace: Boolean
  requestingChat: Boolean
  inviterReadMessage: Boolean
  inviteeReadMessage: Boolean
  invitee: UserCreateOneWithoutReceivedDatesInput!
  place: PlaceCreateOneInput
}

type DateEdge {
  node: Date!
  cursor: String!
}

enum DateOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  isPaying_ASC
  isPaying_DESC
  seen_ASC
  seen_DESC
  isCommonPlace_ASC
  isCommonPlace_DESC
  requestingChat_ASC
  requestingChat_DESC
  inviterReadMessage_ASC
  inviterReadMessage_DESC
  inviteeReadMessage_ASC
  inviteeReadMessage_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DatePreviousValues {
  id: ID!
  status: DATE_STATUS!
  createdAt: DateTime!
  isPaying: Boolean
  seen: Boolean!
  isCommonPlace: Boolean
  requestingChat: Boolean!
  inviterReadMessage: Boolean!
  inviteeReadMessage: Boolean!
}

type DateSubscriptionPayload {
  mutation: MutationType!
  node: Date
  updatedFields: [String!]
  previousValues: DatePreviousValues
}

input DateSubscriptionWhereInput {
  AND: [DateSubscriptionWhereInput!]
  OR: [DateSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DateWhereInput
}

scalar DateTime

input DateUpdateInput {
  status: DATE_STATUS
  isPaying: Boolean
  seen: Boolean
  isCommonPlace: Boolean
  requestingChat: Boolean
  inviterReadMessage: Boolean
  inviteeReadMessage: Boolean
  inviter: UserUpdateOneWithoutSentDatesInput
  invitee: UserUpdateOneWithoutReceivedDatesInput
  place: PlaceUpdateOneInput
}

input DateUpdateManyWithoutInviteeInput {
  create: [DateCreateWithoutInviteeInput!]
  connect: [DateWhereUniqueInput!]
  disconnect: [DateWhereUniqueInput!]
  delete: [DateWhereUniqueInput!]
  update: [DateUpdateWithoutInviteeInput!]
  upsert: [DateUpsertWithoutInviteeInput!]
}

input DateUpdateManyWithoutInviterInput {
  create: [DateCreateWithoutInviterInput!]
  connect: [DateWhereUniqueInput!]
  disconnect: [DateWhereUniqueInput!]
  delete: [DateWhereUniqueInput!]
  update: [DateUpdateWithoutInviterInput!]
  upsert: [DateUpsertWithoutInviterInput!]
}

input DateUpdateOneInput {
  create: DateCreateInput
  connect: DateWhereUniqueInput
  disconnect: DateWhereUniqueInput
  delete: DateWhereUniqueInput
}

input DateUpdateWithoutInviteeDataInput {
  status: DATE_STATUS
  isPaying: Boolean
  seen: Boolean
  isCommonPlace: Boolean
  requestingChat: Boolean
  inviterReadMessage: Boolean
  inviteeReadMessage: Boolean
  inviter: UserUpdateOneWithoutSentDatesInput
  place: PlaceUpdateOneInput
}

input DateUpdateWithoutInviteeInput {
  where: DateWhereUniqueInput!
  data: DateUpdateWithoutInviteeDataInput!
}

input DateUpdateWithoutInviterDataInput {
  status: DATE_STATUS
  isPaying: Boolean
  seen: Boolean
  isCommonPlace: Boolean
  requestingChat: Boolean
  inviterReadMessage: Boolean
  inviteeReadMessage: Boolean
  invitee: UserUpdateOneWithoutReceivedDatesInput
  place: PlaceUpdateOneInput
}

input DateUpdateWithoutInviterInput {
  where: DateWhereUniqueInput!
  data: DateUpdateWithoutInviterDataInput!
}

input DateUpsertWithoutInviteeInput {
  where: DateWhereUniqueInput!
  update: DateUpdateWithoutInviteeDataInput!
  create: DateCreateWithoutInviteeInput!
}

input DateUpsertWithoutInviterInput {
  where: DateWhereUniqueInput!
  update: DateUpdateWithoutInviterDataInput!
  create: DateCreateWithoutInviterInput!
}

input DateWhereInput {
  AND: [DateWhereInput!]
  OR: [DateWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: DATE_STATUS
  status_not: DATE_STATUS
  status_in: [DATE_STATUS!]
  status_not_in: [DATE_STATUS!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  isPaying: Boolean
  isPaying_not: Boolean
  seen: Boolean
  seen_not: Boolean
  isCommonPlace: Boolean
  isCommonPlace_not: Boolean
  requestingChat: Boolean
  requestingChat_not: Boolean
  inviterReadMessage: Boolean
  inviterReadMessage_not: Boolean
  inviteeReadMessage: Boolean
  inviteeReadMessage_not: Boolean
  inviter: UserWhereInput
  invitee: UserWhereInput
  place: PlaceWhereInput
}

input DateWhereUniqueInput {
  id: ID
}

type Education {
  name: String!
  type: String!
}

type EducationConnection {
  pageInfo: PageInfo!
  edges: [EducationEdge]!
  aggregate: AggregateEducation!
}

input EducationCreateInput {
  name: String!
  type: String!
}

input EducationCreateManyInput {
  create: [EducationCreateInput!]
}

type EducationEdge {
  node: Education!
  cursor: String!
}

enum EducationOrderByInput {
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EducationPreviousValues {
  name: String!
  type: String!
}

type EducationSubscriptionPayload {
  mutation: MutationType!
  node: Education
  updatedFields: [String!]
  previousValues: EducationPreviousValues
}

input EducationSubscriptionWhereInput {
  AND: [EducationSubscriptionWhereInput!]
  OR: [EducationSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EducationWhereInput
}

input EducationUpdateInput {
  name: String
  type: String
}

input EducationUpdateManyInput {
  create: [EducationCreateInput!]
}

input EducationWhereInput {
  AND: [EducationWhereInput!]
  OR: [EducationWhereInput!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
}

enum GENDER {
  MALE
  FEMALE
}

enum LANGUAGES {
  FR
  EN
}

type LocationConnection {
  pageInfo: PageInfo!
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  lat: Float!
  lng: Float!
  city: String
  country: String
}

input LocationCreateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

type LocationEdge {
  node: Location!
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
  createdAt_ASC
  createdAt_DESC
  city_ASC
  city_DESC
  country_ASC
  country_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LocationPreviousValues {
  id: ID!
  lat: Float!
  lng: Float!
  createdAt: DateTime!
  city: String
  country: String
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  AND: [LocationSubscriptionWhereInput!]
  OR: [LocationSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationUpdateInput {
  lat: Float
  lng: Float
  city: String
  country: String
}

input LocationUpdateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: LocationWhereUniqueInput
  delete: LocationWhereUniqueInput
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  lat: Float
  lat_not: Float
  lat_in: [Float!]
  lat_not_in: [Float!]
  lat_lt: Float
  lat_lte: Float
  lat_gt: Float
  lat_gte: Float
  lng: Float
  lng_not: Float
  lng_in: [Float!]
  lng_not_in: [Float!]
  lng_lt: Float
  lng_lte: Float
  lng_gt: Float
  lng_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
}

input LocationWhereUniqueInput {
  id: ID
}

scalar Long

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  deliveredAt: DateTime!
  readAt: DateTime!
  from: UserCreateOneWithoutSentMessagesInput!
  to: UserCreateOneWithoutReceivedMessagesInput!
  date: DateCreateOneInput
}

input MessageCreateManyWithoutFromInput {
  create: [MessageCreateWithoutFromInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutToInput {
  create: [MessageCreateWithoutToInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutFromInput {
  deliveredAt: DateTime!
  readAt: DateTime!
  to: UserCreateOneWithoutReceivedMessagesInput!
  date: DateCreateOneInput
}

input MessageCreateWithoutToInput {
  deliveredAt: DateTime!
  readAt: DateTime!
  from: UserCreateOneWithoutSentMessagesInput!
  date: DateCreateOneInput
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  deliveredAt_ASC
  deliveredAt_DESC
  readAt_ASC
  readAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  deliveredAt: DateTime!
  readAt: DateTime!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

input MessageUpdateInput {
  deliveredAt: DateTime
  readAt: DateTime
  from: UserUpdateOneWithoutSentMessagesInput
  to: UserUpdateOneWithoutReceivedMessagesInput
  date: DateUpdateOneInput
}

input MessageUpdateManyWithoutFromInput {
  create: [MessageCreateWithoutFromInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithoutFromInput!]
  upsert: [MessageUpsertWithoutFromInput!]
}

input MessageUpdateManyWithoutToInput {
  create: [MessageCreateWithoutToInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithoutToInput!]
  upsert: [MessageUpsertWithoutToInput!]
}

input MessageUpdateWithoutFromDataInput {
  deliveredAt: DateTime
  readAt: DateTime
  to: UserUpdateOneWithoutReceivedMessagesInput
  date: DateUpdateOneInput
}

input MessageUpdateWithoutFromInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutFromDataInput!
}

input MessageUpdateWithoutToDataInput {
  deliveredAt: DateTime
  readAt: DateTime
  from: UserUpdateOneWithoutSentMessagesInput
  date: DateUpdateOneInput
}

input MessageUpdateWithoutToInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutToDataInput!
}

input MessageUpsertWithoutFromInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutFromDataInput!
  create: MessageCreateWithoutFromInput!
}

input MessageUpsertWithoutToInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutToDataInput!
  create: MessageCreateWithoutToInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deliveredAt: DateTime
  deliveredAt_not: DateTime
  deliveredAt_in: [DateTime!]
  deliveredAt_not_in: [DateTime!]
  deliveredAt_lt: DateTime
  deliveredAt_lte: DateTime
  deliveredAt_gt: DateTime
  deliveredAt_gte: DateTime
  readAt: DateTime
  readAt_not: DateTime
  readAt_in: [DateTime!]
  readAt_not_in: [DateTime!]
  readAt_lt: DateTime
  readAt_lte: DateTime
  readAt_gt: DateTime
  readAt_gte: DateTime
  from: UserWhereInput
  to: UserWhereInput
  date: DateWhereInput
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createEducation(data: EducationCreateInput!): Education!
  createWork(data: WorkCreateInput!): Work!
  createPhoto(data: PhotoCreateInput!): Photo!
  createLocation(data: LocationCreateInput!): Location!
  createAgeFilter(data: AgeFilterCreateInput!): AgeFilter!
  createNotificationSettings(data: NotificationSettingsCreateInput!): NotificationSettings!
  createPlace(data: PlaceCreateInput!): Place!
  createDate(data: DateCreateInput!): Date!
  createMessage(data: MessageCreateInput!): Message!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateNotificationSettings(data: NotificationSettingsUpdateInput!, where: NotificationSettingsWhereUniqueInput!): NotificationSettings
  updatePlace(data: PlaceUpdateInput!, where: PlaceWhereUniqueInput!): Place
  updateDate(data: DateUpdateInput!, where: DateWhereUniqueInput!): Date
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  deleteUser(where: UserWhereUniqueInput!): User
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteNotificationSettings(where: NotificationSettingsWhereUniqueInput!): NotificationSettings
  deletePlace(where: PlaceWhereUniqueInput!): Place
  deleteDate(where: DateWhereUniqueInput!): Date
  deleteMessage(where: MessageWhereUniqueInput!): Message
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  upsertNotificationSettings(where: NotificationSettingsWhereUniqueInput!, create: NotificationSettingsCreateInput!, update: NotificationSettingsUpdateInput!): NotificationSettings!
  upsertPlace(where: PlaceWhereUniqueInput!, create: PlaceCreateInput!, update: PlaceUpdateInput!): Place!
  upsertDate(where: DateWhereUniqueInput!, create: DateCreateInput!, update: DateUpdateInput!): Date!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyEducations(data: EducationUpdateInput!, where: EducationWhereInput!): BatchPayload!
  updateManyWorks(data: WorkUpdateInput!, where: WorkWhereInput!): BatchPayload!
  updateManyPhotos(data: PhotoUpdateInput!, where: PhotoWhereInput!): BatchPayload!
  updateManyLocations(data: LocationUpdateInput!, where: LocationWhereInput!): BatchPayload!
  updateManyAgeFilters(data: AgeFilterUpdateInput!, where: AgeFilterWhereInput!): BatchPayload!
  updateManyNotificationSettingses(data: NotificationSettingsUpdateInput!, where: NotificationSettingsWhereInput!): BatchPayload!
  updateManyPlaces(data: PlaceUpdateInput!, where: PlaceWhereInput!): BatchPayload!
  updateManyDates(data: DateUpdateInput!, where: DateWhereInput!): BatchPayload!
  updateManyMessages(data: MessageUpdateInput!, where: MessageWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyEducations(where: EducationWhereInput!): BatchPayload!
  deleteManyWorks(where: WorkWhereInput!): BatchPayload!
  deleteManyPhotos(where: PhotoWhereInput!): BatchPayload!
  deleteManyLocations(where: LocationWhereInput!): BatchPayload!
  deleteManyAgeFilters(where: AgeFilterWhereInput!): BatchPayload!
  deleteManyNotificationSettingses(where: NotificationSettingsWhereInput!): BatchPayload!
  deleteManyPlaces(where: PlaceWhereInput!): BatchPayload!
  deleteManyDates(where: DateWhereInput!): BatchPayload!
  deleteManyMessages(where: MessageWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type NotificationSettingsConnection {
  pageInfo: PageInfo!
  edges: [NotificationSettingsEdge]!
  aggregate: AggregateNotificationSettings!
}

input NotificationSettingsCreateInput {
  onInvite: Boolean
  onMessage: Boolean
  onGeneral: Boolean
  onWink: Boolean
  onWinkConfirmation: Boolean
  user: UserCreateOneWithoutNotificationSettingsInput!
}

input NotificationSettingsCreateOneWithoutUserInput {
  create: NotificationSettingsCreateWithoutUserInput
  connect: NotificationSettingsWhereUniqueInput
}

input NotificationSettingsCreateWithoutUserInput {
  onInvite: Boolean
  onMessage: Boolean
  onGeneral: Boolean
  onWink: Boolean
  onWinkConfirmation: Boolean
}

type NotificationSettingsEdge {
  node: NotificationSettings!
  cursor: String!
}

enum NotificationSettingsOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  onInvite_ASC
  onInvite_DESC
  onMessage_ASC
  onMessage_DESC
  onGeneral_ASC
  onGeneral_DESC
  onWink_ASC
  onWink_DESC
  onWinkConfirmation_ASC
  onWinkConfirmation_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NotificationSettingsPreviousValues {
  id: ID!
  createdAt: DateTime!
  onInvite: Boolean!
  onMessage: Boolean!
  onGeneral: Boolean!
  onWink: Boolean!
  onWinkConfirmation: Boolean!
}

type NotificationSettingsSubscriptionPayload {
  mutation: MutationType!
  node: NotificationSettings
  updatedFields: [String!]
  previousValues: NotificationSettingsPreviousValues
}

input NotificationSettingsSubscriptionWhereInput {
  AND: [NotificationSettingsSubscriptionWhereInput!]
  OR: [NotificationSettingsSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationSettingsWhereInput
}

input NotificationSettingsUpdateInput {
  onInvite: Boolean
  onMessage: Boolean
  onGeneral: Boolean
  onWink: Boolean
  onWinkConfirmation: Boolean
  user: UserUpdateOneWithoutNotificationSettingsInput
}

input NotificationSettingsUpdateOneWithoutUserInput {
  create: NotificationSettingsCreateWithoutUserInput
  connect: NotificationSettingsWhereUniqueInput
  disconnect: NotificationSettingsWhereUniqueInput
  delete: NotificationSettingsWhereUniqueInput
  update: NotificationSettingsUpdateWithoutUserInput
  upsert: NotificationSettingsUpsertWithoutUserInput
}

input NotificationSettingsUpdateWithoutUserDataInput {
  onInvite: Boolean
  onMessage: Boolean
  onGeneral: Boolean
  onWink: Boolean
  onWinkConfirmation: Boolean
}

input NotificationSettingsUpdateWithoutUserInput {
  where: NotificationSettingsWhereUniqueInput!
  data: NotificationSettingsUpdateWithoutUserDataInput!
}

input NotificationSettingsUpsertWithoutUserInput {
  where: NotificationSettingsWhereUniqueInput!
  update: NotificationSettingsUpdateWithoutUserDataInput!
  create: NotificationSettingsCreateWithoutUserInput!
}

input NotificationSettingsWhereInput {
  AND: [NotificationSettingsWhereInput!]
  OR: [NotificationSettingsWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  onInvite: Boolean
  onInvite_not: Boolean
  onMessage: Boolean
  onMessage_not: Boolean
  onGeneral: Boolean
  onGeneral_not: Boolean
  onWink: Boolean
  onWink_not: Boolean
  onWinkConfirmation: Boolean
  onWinkConfirmation_not: Boolean
  user: UserWhereInput
}

input NotificationSettingsWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Photo {
  url: String!
}

type PhotoConnection {
  pageInfo: PageInfo!
  edges: [PhotoEdge]!
  aggregate: AggregatePhoto!
}

input PhotoCreateInput {
  url: String!
}

input PhotoCreateManyInput {
  create: [PhotoCreateInput!]
}

type PhotoEdge {
  node: Photo!
  cursor: String!
}

enum PhotoOrderByInput {
  url_ASC
  url_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PhotoPreviousValues {
  url: String!
}

type PhotoSubscriptionPayload {
  mutation: MutationType!
  node: Photo
  updatedFields: [String!]
  previousValues: PhotoPreviousValues
}

input PhotoSubscriptionWhereInput {
  AND: [PhotoSubscriptionWhereInput!]
  OR: [PhotoSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PhotoWhereInput
}

input PhotoUpdateInput {
  url: String
}

input PhotoUpdateManyInput {
  create: [PhotoCreateInput!]
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
}

type PlaceConnection {
  pageInfo: PageInfo!
  edges: [PlaceEdge]!
  aggregate: AggregatePlace!
}

input PlaceCreatecuratedFieldsInput {
  set: [String!]
}

input PlaceCreateInput {
  name: String!
  priceRating: Int
  googlePlacesId: String!
  weight: Int!
  website: String
  phone: String
  address: String
  fromGoogle: Boolean
  state: String
  lastGoogleUpdate: DateTime
  description: String
  detailsFetched: Boolean
  openingHours: PlaceCreateopeningHoursInput
  types: PlaceCreatetypesInput
  curatedFields: PlaceCreatecuratedFieldsInput
  location: LocationCreateOneInput!
  users: UserCreateManyWithoutPlacesInput
}

input PlaceCreateManyWithoutUsersInput {
  create: [PlaceCreateWithoutUsersInput!]
  connect: [PlaceWhereUniqueInput!]
}

input PlaceCreateOneInput {
  create: PlaceCreateInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateopeningHoursInput {
  set: [String!]
}

input PlaceCreatetypesInput {
  set: [String!]
}

input PlaceCreateWithoutUsersInput {
  name: String!
  priceRating: Int
  googlePlacesId: String!
  weight: Int!
  website: String
  phone: String
  address: String
  fromGoogle: Boolean
  state: String
  lastGoogleUpdate: DateTime
  description: String
  detailsFetched: Boolean
  openingHours: PlaceCreateopeningHoursInput
  types: PlaceCreatetypesInput
  curatedFields: PlaceCreatecuratedFieldsInput
  location: LocationCreateOneInput!
}

type PlaceEdge {
  node: Place!
  cursor: String!
}

enum PlaceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  priceRating_ASC
  priceRating_DESC
  googlePlacesId_ASC
  googlePlacesId_DESC
  createdAt_ASC
  createdAt_DESC
  weight_ASC
  weight_DESC
  website_ASC
  website_DESC
  phone_ASC
  phone_DESC
  address_ASC
  address_DESC
  fromGoogle_ASC
  fromGoogle_DESC
  state_ASC
  state_DESC
  lastGoogleUpdate_ASC
  lastGoogleUpdate_DESC
  description_ASC
  description_DESC
  detailsFetched_ASC
  detailsFetched_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PlacePreviousValues {
  id: ID!
  name: String!
  priceRating: Int
  googlePlacesId: String!
  createdAt: DateTime!
  weight: Int!
  website: String
  phone: String
  address: String
  openingHours: [String!]
  types: [String!]
  fromGoogle: Boolean
  state: String
  lastGoogleUpdate: DateTime
  curatedFields: [String!]
  description: String
  detailsFetched: Boolean!
}

type PlaceSubscriptionPayload {
  mutation: MutationType!
  node: Place
  updatedFields: [String!]
  previousValues: PlacePreviousValues
}

input PlaceSubscriptionWhereInput {
  AND: [PlaceSubscriptionWhereInput!]
  OR: [PlaceSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlaceWhereInput
}

input PlaceUpdatecuratedFieldsInput {
  set: [String!]
}

input PlaceUpdateInput {
  name: String
  priceRating: Int
  googlePlacesId: String
  weight: Int
  website: String
  phone: String
  address: String
  fromGoogle: Boolean
  state: String
  lastGoogleUpdate: DateTime
  description: String
  detailsFetched: Boolean
  openingHours: PlaceUpdateopeningHoursInput
  types: PlaceUpdatetypesInput
  curatedFields: PlaceUpdatecuratedFieldsInput
  location: LocationUpdateOneInput
  users: UserUpdateManyWithoutPlacesInput
}

input PlaceUpdateManyWithoutUsersInput {
  create: [PlaceCreateWithoutUsersInput!]
  connect: [PlaceWhereUniqueInput!]
  disconnect: [PlaceWhereUniqueInput!]
  delete: [PlaceWhereUniqueInput!]
  update: [PlaceUpdateWithoutUsersInput!]
  upsert: [PlaceUpsertWithoutUsersInput!]
}

input PlaceUpdateOneInput {
  create: PlaceCreateInput
  connect: PlaceWhereUniqueInput
  disconnect: PlaceWhereUniqueInput
  delete: PlaceWhereUniqueInput
}

input PlaceUpdateopeningHoursInput {
  set: [String!]
}

input PlaceUpdatetypesInput {
  set: [String!]
}

input PlaceUpdateWithoutUsersDataInput {
  name: String
  priceRating: Int
  googlePlacesId: String
  weight: Int
  website: String
  phone: String
  address: String
  fromGoogle: Boolean
  state: String
  lastGoogleUpdate: DateTime
  description: String
  detailsFetched: Boolean
  openingHours: PlaceUpdateopeningHoursInput
  types: PlaceUpdatetypesInput
  curatedFields: PlaceUpdatecuratedFieldsInput
  location: LocationUpdateOneInput
}

input PlaceUpdateWithoutUsersInput {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateWithoutUsersDataInput!
}

input PlaceUpsertWithoutUsersInput {
  where: PlaceWhereUniqueInput!
  update: PlaceUpdateWithoutUsersDataInput!
  create: PlaceCreateWithoutUsersInput!
}

input PlaceWhereInput {
  AND: [PlaceWhereInput!]
  OR: [PlaceWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  priceRating: Int
  priceRating_not: Int
  priceRating_in: [Int!]
  priceRating_not_in: [Int!]
  priceRating_lt: Int
  priceRating_lte: Int
  priceRating_gt: Int
  priceRating_gte: Int
  googlePlacesId: String
  googlePlacesId_not: String
  googlePlacesId_in: [String!]
  googlePlacesId_not_in: [String!]
  googlePlacesId_lt: String
  googlePlacesId_lte: String
  googlePlacesId_gt: String
  googlePlacesId_gte: String
  googlePlacesId_contains: String
  googlePlacesId_not_contains: String
  googlePlacesId_starts_with: String
  googlePlacesId_not_starts_with: String
  googlePlacesId_ends_with: String
  googlePlacesId_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  fromGoogle: Boolean
  fromGoogle_not: Boolean
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  lastGoogleUpdate: DateTime
  lastGoogleUpdate_not: DateTime
  lastGoogleUpdate_in: [DateTime!]
  lastGoogleUpdate_not_in: [DateTime!]
  lastGoogleUpdate_lt: DateTime
  lastGoogleUpdate_lte: DateTime
  lastGoogleUpdate_gt: DateTime
  lastGoogleUpdate_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  detailsFetched: Boolean
  detailsFetched_not: Boolean
  location: LocationWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input PlaceWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  educations(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Education]!
  works(where: WorkWhereInput, orderBy: WorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Work]!
  photos(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Photo]!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  ageFilters(where: AgeFilterWhereInput, orderBy: AgeFilterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AgeFilter]!
  notificationSettingses(where: NotificationSettingsWhereInput, orderBy: NotificationSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationSettings]!
  places(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Place]!
  dates(where: DateWhereInput, orderBy: DateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Date]!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  user(where: UserWhereUniqueInput!): User
  location(where: LocationWhereUniqueInput!): Location
  notificationSettings(where: NotificationSettingsWhereUniqueInput!): NotificationSettings
  place(where: PlaceWhereUniqueInput!): Place
  date(where: DateWhereUniqueInput!): Date
  message(where: MessageWhereUniqueInput!): Message
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  educationsConnection(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EducationConnection!
  worksConnection(where: WorkWhereInput, orderBy: WorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkConnection!
  photosConnection(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhotoConnection!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  ageFiltersConnection(where: AgeFilterWhereInput, orderBy: AgeFilterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AgeFilterConnection!
  notificationSettingsesConnection(where: NotificationSettingsWhereInput, orderBy: NotificationSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationSettingsConnection!
  placesConnection(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaceConnection!
  datesConnection(where: DateWhereInput, orderBy: DateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DateConnection!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  node(id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  education(where: EducationSubscriptionWhereInput): EducationSubscriptionPayload
  work(where: WorkSubscriptionWhereInput): WorkSubscriptionPayload
  photo(where: PhotoSubscriptionWhereInput): PhotoSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  ageFilter(where: AgeFilterSubscriptionWhereInput): AgeFilterSubscriptionPayload
  notificationSettings(where: NotificationSettingsSubscriptionWhereInput): NotificationSettingsSubscriptionPayload
  place(where: PlaceSubscriptionWhereInput): PlaceSubscriptionPayload
  date(where: DateSubscriptionWhereInput): DateSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  places: PlaceCreateManyWithoutUsersInput
  reported: UserCreateManyWithoutReportedInput
  uninterested: UserCreateManyWithoutUninterestedInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  sentDates: DateCreateManyWithoutInviterInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

input UserCreateManyWithoutPlacesInput {
  create: [UserCreateWithoutPlacesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutReportedInput {
  create: [UserCreateWithoutReportedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUninterestedInput {
  create: [UserCreateWithoutUninterestedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutNotificationSettingsInput {
  create: UserCreateWithoutNotificationSettingsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReceivedDatesInput {
  create: UserCreateWithoutReceivedDatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReceivedMessagesInput {
  create: UserCreateWithoutReceivedMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentDatesInput {
  create: UserCreateWithoutSentDatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentMessagesInput {
  create: UserCreateWithoutSentMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreatetargetGendersInput {
  set: [GENDER!]
}

input UserCreateWithoutNotificationSettingsInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  places: PlaceCreateManyWithoutUsersInput
  reported: UserCreateManyWithoutReportedInput
  uninterested: UserCreateManyWithoutUninterestedInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  sentDates: DateCreateManyWithoutInviterInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

input UserCreateWithoutPlacesInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  reported: UserCreateManyWithoutReportedInput
  uninterested: UserCreateManyWithoutUninterestedInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  sentDates: DateCreateManyWithoutInviterInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

input UserCreateWithoutReceivedDatesInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  places: PlaceCreateManyWithoutUsersInput
  reported: UserCreateManyWithoutReportedInput
  uninterested: UserCreateManyWithoutUninterestedInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  sentDates: DateCreateManyWithoutInviterInput
}

input UserCreateWithoutReceivedMessagesInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  places: PlaceCreateManyWithoutUsersInput
  reported: UserCreateManyWithoutReportedInput
  uninterested: UserCreateManyWithoutUninterestedInput
  sentMessages: MessageCreateManyWithoutFromInput
  sentDates: DateCreateManyWithoutInviterInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

input UserCreateWithoutReportedInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  places: PlaceCreateManyWithoutUsersInput
  uninterested: UserCreateManyWithoutUninterestedInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  sentDates: DateCreateManyWithoutInviterInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

input UserCreateWithoutSentDatesInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  places: PlaceCreateManyWithoutUsersInput
  reported: UserCreateManyWithoutReportedInput
  uninterested: UserCreateManyWithoutUninterestedInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

input UserCreateWithoutSentMessagesInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  places: PlaceCreateManyWithoutUsersInput
  reported: UserCreateManyWithoutReportedInput
  uninterested: UserCreateManyWithoutUninterestedInput
  receivedMessages: MessageCreateManyWithoutToInput
  sentDates: DateCreateManyWithoutInviterInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

input UserCreateWithoutUninterestedInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  places: PlaceCreateManyWithoutUsersInput
  reported: UserCreateManyWithoutReportedInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  sentDates: DateCreateManyWithoutInviterInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  facebookUserId_ASC
  facebookUserId_DESC
  name_ASC
  name_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  birthday_ASC
  birthday_DESC
  locale_ASC
  locale_DESC
  email_ASC
  email_DESC
  gender_ASC
  gender_DESC
  bio_ASC
  bio_DESC
  lastLogin_ASC
  lastLogin_DESC
  distanceFilter_ASC
  distanceFilter_DESC
  oneSignalId_ASC
  oneSignalId_DESC
  createdAt_ASC
  createdAt_DESC
  onboarding_ASC
  onboarding_DESC
  hideAge_ASC
  hideAge_DESC
  language_ASC
  language_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  targetGenders: [GENDER!]
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  createdAt: DateTime!
  onboarding: Boolean!
  hideAge: Boolean!
  language: LANGUAGES!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  places: PlaceUpdateManyWithoutUsersInput
  reported: UserUpdateManyWithoutReportedInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  sentDates: DateUpdateManyWithoutInviterInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateManyWithoutPlacesInput {
  create: [UserCreateWithoutPlacesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutPlacesInput!]
  upsert: [UserUpsertWithoutPlacesInput!]
}

input UserUpdateManyWithoutReportedInput {
  create: [UserCreateWithoutReportedInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutReportedInput!]
  upsert: [UserUpsertWithoutReportedInput!]
}

input UserUpdateManyWithoutUninterestedInput {
  create: [UserCreateWithoutUninterestedInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutUninterestedInput!]
  upsert: [UserUpsertWithoutUninterestedInput!]
}

input UserUpdateOneWithoutNotificationSettingsInput {
  create: UserCreateWithoutNotificationSettingsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutNotificationSettingsInput
  upsert: UserUpsertWithoutNotificationSettingsInput
}

input UserUpdateOneWithoutReceivedDatesInput {
  create: UserCreateWithoutReceivedDatesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutReceivedDatesInput
  upsert: UserUpsertWithoutReceivedDatesInput
}

input UserUpdateOneWithoutReceivedMessagesInput {
  create: UserCreateWithoutReceivedMessagesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutReceivedMessagesInput
  upsert: UserUpsertWithoutReceivedMessagesInput
}

input UserUpdateOneWithoutSentDatesInput {
  create: UserCreateWithoutSentDatesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutSentDatesInput
  upsert: UserUpsertWithoutSentDatesInput
}

input UserUpdateOneWithoutSentMessagesInput {
  create: UserCreateWithoutSentMessagesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutSentMessagesInput
  upsert: UserUpsertWithoutSentMessagesInput
}

input UserUpdatetargetGendersInput {
  set: [GENDER!]
}

input UserUpdateWithoutNotificationSettingsDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  places: PlaceUpdateManyWithoutUsersInput
  reported: UserUpdateManyWithoutReportedInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  sentDates: DateUpdateManyWithoutInviterInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateWithoutNotificationSettingsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutNotificationSettingsDataInput!
}

input UserUpdateWithoutPlacesDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  reported: UserUpdateManyWithoutReportedInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  sentDates: DateUpdateManyWithoutInviterInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateWithoutPlacesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPlacesDataInput!
}

input UserUpdateWithoutReceivedDatesDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  places: PlaceUpdateManyWithoutUsersInput
  reported: UserUpdateManyWithoutReportedInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  sentDates: DateUpdateManyWithoutInviterInput
}

input UserUpdateWithoutReceivedDatesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutReceivedDatesDataInput!
}

input UserUpdateWithoutReceivedMessagesDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  places: PlaceUpdateManyWithoutUsersInput
  reported: UserUpdateManyWithoutReportedInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  sentDates: DateUpdateManyWithoutInviterInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateWithoutReceivedMessagesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutReceivedMessagesDataInput!
}

input UserUpdateWithoutReportedDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  places: PlaceUpdateManyWithoutUsersInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  sentDates: DateUpdateManyWithoutInviterInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateWithoutReportedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutReportedDataInput!
}

input UserUpdateWithoutSentDatesDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  places: PlaceUpdateManyWithoutUsersInput
  reported: UserUpdateManyWithoutReportedInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateWithoutSentDatesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSentDatesDataInput!
}

input UserUpdateWithoutSentMessagesDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  places: PlaceUpdateManyWithoutUsersInput
  reported: UserUpdateManyWithoutReportedInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  receivedMessages: MessageUpdateManyWithoutToInput
  sentDates: DateUpdateManyWithoutInviterInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateWithoutSentMessagesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSentMessagesDataInput!
}

input UserUpdateWithoutUninterestedDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  places: PlaceUpdateManyWithoutUsersInput
  reported: UserUpdateManyWithoutReportedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  sentDates: DateUpdateManyWithoutInviterInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateWithoutUninterestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutUninterestedDataInput!
}

input UserUpsertWithoutNotificationSettingsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutNotificationSettingsDataInput!
  create: UserCreateWithoutNotificationSettingsInput!
}

input UserUpsertWithoutPlacesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPlacesDataInput!
  create: UserCreateWithoutPlacesInput!
}

input UserUpsertWithoutReceivedDatesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutReceivedDatesDataInput!
  create: UserCreateWithoutReceivedDatesInput!
}

input UserUpsertWithoutReceivedMessagesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutReceivedMessagesDataInput!
  create: UserCreateWithoutReceivedMessagesInput!
}

input UserUpsertWithoutReportedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutReportedDataInput!
  create: UserCreateWithoutReportedInput!
}

input UserUpsertWithoutSentDatesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSentDatesDataInput!
  create: UserCreateWithoutSentDatesInput!
}

input UserUpsertWithoutSentMessagesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSentMessagesDataInput!
  create: UserCreateWithoutSentMessagesInput!
}

input UserUpsertWithoutUninterestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutUninterestedDataInput!
  create: UserCreateWithoutUninterestedInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  facebookUserId: String
  facebookUserId_not: String
  facebookUserId_in: [String!]
  facebookUserId_not_in: [String!]
  facebookUserId_lt: String
  facebookUserId_lte: String
  facebookUserId_gt: String
  facebookUserId_gte: String
  facebookUserId_contains: String
  facebookUserId_not_contains: String
  facebookUserId_starts_with: String
  facebookUserId_not_starts_with: String
  facebookUserId_ends_with: String
  facebookUserId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  birthday: DateTime
  birthday_not: DateTime
  birthday_in: [DateTime!]
  birthday_not_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  locale: String
  locale_not: String
  locale_in: [String!]
  locale_not_in: [String!]
  locale_lt: String
  locale_lte: String
  locale_gt: String
  locale_gte: String
  locale_contains: String
  locale_not_contains: String
  locale_starts_with: String
  locale_not_starts_with: String
  locale_ends_with: String
  locale_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  gender: GENDER
  gender_not: GENDER
  gender_in: [GENDER!]
  gender_not_in: [GENDER!]
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  lastLogin: DateTime
  lastLogin_not: DateTime
  lastLogin_in: [DateTime!]
  lastLogin_not_in: [DateTime!]
  lastLogin_lt: DateTime
  lastLogin_lte: DateTime
  lastLogin_gt: DateTime
  lastLogin_gte: DateTime
  distanceFilter: Int
  distanceFilter_not: Int
  distanceFilter_in: [Int!]
  distanceFilter_not_in: [Int!]
  distanceFilter_lt: Int
  distanceFilter_lte: Int
  distanceFilter_gt: Int
  distanceFilter_gte: Int
  oneSignalId: String
  oneSignalId_not: String
  oneSignalId_in: [String!]
  oneSignalId_not_in: [String!]
  oneSignalId_lt: String
  oneSignalId_lte: String
  oneSignalId_gt: String
  oneSignalId_gte: String
  oneSignalId_contains: String
  oneSignalId_not_contains: String
  oneSignalId_starts_with: String
  oneSignalId_not_starts_with: String
  oneSignalId_ends_with: String
  oneSignalId_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  onboarding: Boolean
  onboarding_not: Boolean
  hideAge: Boolean
  hideAge_not: Boolean
  language: LANGUAGES
  language_not: LANGUAGES
  language_in: [LANGUAGES!]
  language_not_in: [LANGUAGES!]
  education_every: EducationWhereInput
  education_some: EducationWhereInput
  education_none: EducationWhereInput
  work_every: WorkWhereInput
  work_some: WorkWhereInput
  work_none: WorkWhereInput
  photos_every: PhotoWhereInput
  photos_some: PhotoWhereInput
  photos_none: PhotoWhereInput
  location: LocationWhereInput
  ageFilter: AgeFilterWhereInput
  notificationSettings: NotificationSettingsWhereInput
  places_every: PlaceWhereInput
  places_some: PlaceWhereInput
  places_none: PlaceWhereInput
  reported_every: UserWhereInput
  reported_some: UserWhereInput
  reported_none: UserWhereInput
  uninterested_every: UserWhereInput
  uninterested_some: UserWhereInput
  uninterested_none: UserWhereInput
  sentMessages_every: MessageWhereInput
  sentMessages_some: MessageWhereInput
  sentMessages_none: MessageWhereInput
  receivedMessages_every: MessageWhereInput
  receivedMessages_some: MessageWhereInput
  receivedMessages_none: MessageWhereInput
  sentDates_every: DateWhereInput
  sentDates_some: DateWhereInput
  sentDates_none: DateWhereInput
  receivedDates_every: DateWhereInput
  receivedDates_some: DateWhereInput
  receivedDates_none: DateWhereInput
}

input UserWhereUniqueInput {
  id: ID
  facebookUserId: String
}

type Work {
  employer: String!
  location: String!
  position: String!
}

type WorkConnection {
  pageInfo: PageInfo!
  edges: [WorkEdge]!
  aggregate: AggregateWork!
}

input WorkCreateInput {
  employer: String!
  location: String!
  position: String!
}

input WorkCreateManyInput {
  create: [WorkCreateInput!]
}

type WorkEdge {
  node: Work!
  cursor: String!
}

enum WorkOrderByInput {
  employer_ASC
  employer_DESC
  location_ASC
  location_DESC
  position_ASC
  position_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkPreviousValues {
  employer: String!
  location: String!
  position: String!
}

type WorkSubscriptionPayload {
  mutation: MutationType!
  node: Work
  updatedFields: [String!]
  previousValues: WorkPreviousValues
}

input WorkSubscriptionWhereInput {
  AND: [WorkSubscriptionWhereInput!]
  OR: [WorkSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkWhereInput
}

input WorkUpdateInput {
  employer: String
  location: String
  position: String
}

input WorkUpdateManyInput {
  create: [WorkCreateInput!]
}

input WorkWhereInput {
  AND: [WorkWhereInput!]
  OR: [WorkWhereInput!]
  employer: String
  employer_not: String
  employer_in: [String!]
  employer_not_in: [String!]
  employer_lt: String
  employer_lte: String
  employer_gt: String
  employer_gte: String
  employer_contains: String
  employer_not_contains: String
  employer_starts_with: String
  employer_not_starts_with: String
  employer_ends_with: String
  employer_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
}
