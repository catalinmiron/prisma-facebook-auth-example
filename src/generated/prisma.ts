import { Prisma as BasePrisma, BasePrismaOptions } from 'prisma-binding'
import { GraphQLResolveInfo } from 'graphql'

const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Date implements Node {
  id: ID!
  inviter(where: UserWhereInput): User!
  invitee(where: UserWhereInput): User!
  place(where: PlaceWhereInput): Place
  status: DATE_STATUS!
  createdAt: DateTime!
  isPaying: Boolean
  seen: Boolean!
  isCommonPlace: Boolean
  requestingChat: Boolean!
  inviterReadMessage: Boolean!
  inviteeReadMessage: Boolean!
}

type Location implements Node {
  id: ID!
  lat: Float!
  lng: Float!
  createdAt: DateTime!
  city: String
  country: String
}

type Message implements Node {
  id: ID!
  createdAt: DateTime!
  from(where: UserWhereInput): User!
  to(where: UserWhereInput): User!
  deliveredAt: DateTime!
  readAt: DateTime!
  date(where: DateWhereInput): Date
}

type NotificationSettings implements Node {
  id: ID!
  user(where: UserWhereInput): User!
  createdAt: DateTime!
  onInvite: Boolean!
  onMessage: Boolean!
  onGeneral: Boolean!
  onWink: Boolean!
  onWinkConfirmation: Boolean!
}

type Place implements Node {
  id: ID!
  name: String!
  priceRating: Int
  location(where: LocationWhereInput): Location!
  googlePlacesId: String!
  createdAt: DateTime!
  weight: Int!
  website: String
  phone: String
  address: String
  openingHours: [String!]
  types: [String!]
  fromGoogle: Boolean
  state: String
  lastGoogleUpdate: DateTime
  curatedFields: [String!]
  description: String
  detailsFetched: Boolean!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type User implements Node {
  id: ID!
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  education(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Education!]
  work(where: WorkWhereInput, orderBy: WorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Work!]
  email: String
  gender: GENDER!
  targetGenders: [GENDER!]
  photos(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Photo!]
  bio: String
  location(where: LocationWhereInput): Location
  lastLogin: DateTime!
  distanceFilter: Int
  ageFilter(where: AgeFilterWhereInput): AgeFilter
  oneSignalId: String
  notificationSettings(where: NotificationSettingsWhereInput): NotificationSettings
  createdAt: DateTime!
  onboarding: Boolean!
  hideAge: Boolean!
  language: LANGUAGES!
  places(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Place!]
  reported(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  uninterested(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  sentMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  receivedMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  sentDates(where: DateWhereInput, orderBy: DateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Date!]
  receivedDates(where: DateWhereInput, orderBy: DateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Date!]
}


#
# Other Types
#

type AgeFilter {
  min: Int!
  max: Int!
}

type AgeFilterConnection {
  pageInfo: PageInfo!
  edges: [AgeFilterEdge]!
  aggregate: AggregateAgeFilter!
}

input AgeFilterCreateInput {
  min: Int!
  max: Int!
}

input AgeFilterCreateOneInput {
  create: AgeFilterCreateInput
}

type AgeFilterEdge {
  node: AgeFilter!
  cursor: String!
}

enum AgeFilterOrderByInput {
  min_ASC
  min_DESC
  max_ASC
  max_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AgeFilterPreviousValues {
  min: Int!
  max: Int!
}

type AgeFilterSubscriptionPayload {
  mutation: MutationType!
  node: AgeFilter
  updatedFields: [String!]
  previousValues: AgeFilterPreviousValues
}

input AgeFilterSubscriptionWhereInput {
  AND: [AgeFilterSubscriptionWhereInput!]
  OR: [AgeFilterSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AgeFilterWhereInput
}

input AgeFilterUpdateInput {
  min: Int
  max: Int
}

input AgeFilterUpdateOneInput {
  create: AgeFilterCreateInput
}

input AgeFilterWhereInput {
  AND: [AgeFilterWhereInput!]
  OR: [AgeFilterWhereInput!]
  min: Int
  min_not: Int
  min_in: [Int!]
  min_not_in: [Int!]
  min_lt: Int
  min_lte: Int
  min_gt: Int
  min_gte: Int
  max: Int
  max_not: Int
  max_in: [Int!]
  max_not_in: [Int!]
  max_lt: Int
  max_lte: Int
  max_gt: Int
  max_gte: Int
}

type AggregateAgeFilter {
  count: Int!
}

type AggregateDate {
  count: Int!
}

type AggregateEducation {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateNotificationSettings {
  count: Int!
}

type AggregatePhoto {
  count: Int!
}

type AggregatePlace {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWork {
  count: Int!
}

type BatchPayload {
  count: Long!
}

enum DATE_STATUS {
  PENDING
  ACCEPTED
  REFUSED
}

type DateConnection {
  pageInfo: PageInfo!
  edges: [DateEdge]!
  aggregate: AggregateDate!
}

input DateCreateInput {
  status: DATE_STATUS
  isPaying: Boolean
  seen: Boolean
  isCommonPlace: Boolean
  requestingChat: Boolean
  inviterReadMessage: Boolean
  inviteeReadMessage: Boolean
  inviter: UserCreateOneWithoutSentDatesInput!
  invitee: UserCreateOneWithoutReceivedDatesInput!
  place: PlaceCreateOneInput
}

input DateCreateManyWithoutInviteeInput {
  create: [DateCreateWithoutInviteeInput!]
  connect: [DateWhereUniqueInput!]
}

input DateCreateManyWithoutInviterInput {
  create: [DateCreateWithoutInviterInput!]
  connect: [DateWhereUniqueInput!]
}

input DateCreateOneInput {
  create: DateCreateInput
  connect: DateWhereUniqueInput
}

input DateCreateWithoutInviteeInput {
  status: DATE_STATUS
  isPaying: Boolean
  seen: Boolean
  isCommonPlace: Boolean
  requestingChat: Boolean
  inviterReadMessage: Boolean
  inviteeReadMessage: Boolean
  inviter: UserCreateOneWithoutSentDatesInput!
  place: PlaceCreateOneInput
}

input DateCreateWithoutInviterInput {
  status: DATE_STATUS
  isPaying: Boolean
  seen: Boolean
  isCommonPlace: Boolean
  requestingChat: Boolean
  inviterReadMessage: Boolean
  inviteeReadMessage: Boolean
  invitee: UserCreateOneWithoutReceivedDatesInput!
  place: PlaceCreateOneInput
}

type DateEdge {
  node: Date!
  cursor: String!
}

enum DateOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  isPaying_ASC
  isPaying_DESC
  seen_ASC
  seen_DESC
  isCommonPlace_ASC
  isCommonPlace_DESC
  requestingChat_ASC
  requestingChat_DESC
  inviterReadMessage_ASC
  inviterReadMessage_DESC
  inviteeReadMessage_ASC
  inviteeReadMessage_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DatePreviousValues {
  id: ID!
  status: DATE_STATUS!
  createdAt: DateTime!
  isPaying: Boolean
  seen: Boolean!
  isCommonPlace: Boolean
  requestingChat: Boolean!
  inviterReadMessage: Boolean!
  inviteeReadMessage: Boolean!
}

type DateSubscriptionPayload {
  mutation: MutationType!
  node: Date
  updatedFields: [String!]
  previousValues: DatePreviousValues
}

input DateSubscriptionWhereInput {
  AND: [DateSubscriptionWhereInput!]
  OR: [DateSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DateWhereInput
}

scalar DateTime

input DateUpdateInput {
  status: DATE_STATUS
  isPaying: Boolean
  seen: Boolean
  isCommonPlace: Boolean
  requestingChat: Boolean
  inviterReadMessage: Boolean
  inviteeReadMessage: Boolean
  inviter: UserUpdateOneWithoutSentDatesInput
  invitee: UserUpdateOneWithoutReceivedDatesInput
  place: PlaceUpdateOneInput
}

input DateUpdateManyWithoutInviteeInput {
  create: [DateCreateWithoutInviteeInput!]
  connect: [DateWhereUniqueInput!]
  disconnect: [DateWhereUniqueInput!]
  delete: [DateWhereUniqueInput!]
  update: [DateUpdateWithoutInviteeInput!]
  upsert: [DateUpsertWithoutInviteeInput!]
}

input DateUpdateManyWithoutInviterInput {
  create: [DateCreateWithoutInviterInput!]
  connect: [DateWhereUniqueInput!]
  disconnect: [DateWhereUniqueInput!]
  delete: [DateWhereUniqueInput!]
  update: [DateUpdateWithoutInviterInput!]
  upsert: [DateUpsertWithoutInviterInput!]
}

input DateUpdateOneInput {
  create: DateCreateInput
  connect: DateWhereUniqueInput
  disconnect: DateWhereUniqueInput
  delete: DateWhereUniqueInput
}

input DateUpdateWithoutInviteeDataInput {
  status: DATE_STATUS
  isPaying: Boolean
  seen: Boolean
  isCommonPlace: Boolean
  requestingChat: Boolean
  inviterReadMessage: Boolean
  inviteeReadMessage: Boolean
  inviter: UserUpdateOneWithoutSentDatesInput
  place: PlaceUpdateOneInput
}

input DateUpdateWithoutInviteeInput {
  where: DateWhereUniqueInput!
  data: DateUpdateWithoutInviteeDataInput!
}

input DateUpdateWithoutInviterDataInput {
  status: DATE_STATUS
  isPaying: Boolean
  seen: Boolean
  isCommonPlace: Boolean
  requestingChat: Boolean
  inviterReadMessage: Boolean
  inviteeReadMessage: Boolean
  invitee: UserUpdateOneWithoutReceivedDatesInput
  place: PlaceUpdateOneInput
}

input DateUpdateWithoutInviterInput {
  where: DateWhereUniqueInput!
  data: DateUpdateWithoutInviterDataInput!
}

input DateUpsertWithoutInviteeInput {
  where: DateWhereUniqueInput!
  update: DateUpdateWithoutInviteeDataInput!
  create: DateCreateWithoutInviteeInput!
}

input DateUpsertWithoutInviterInput {
  where: DateWhereUniqueInput!
  update: DateUpdateWithoutInviterDataInput!
  create: DateCreateWithoutInviterInput!
}

input DateWhereInput {
  AND: [DateWhereInput!]
  OR: [DateWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: DATE_STATUS
  status_not: DATE_STATUS
  status_in: [DATE_STATUS!]
  status_not_in: [DATE_STATUS!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  isPaying: Boolean
  isPaying_not: Boolean
  seen: Boolean
  seen_not: Boolean
  isCommonPlace: Boolean
  isCommonPlace_not: Boolean
  requestingChat: Boolean
  requestingChat_not: Boolean
  inviterReadMessage: Boolean
  inviterReadMessage_not: Boolean
  inviteeReadMessage: Boolean
  inviteeReadMessage_not: Boolean
  inviter: UserWhereInput
  invitee: UserWhereInput
  place: PlaceWhereInput
}

input DateWhereUniqueInput {
  id: ID
}

type Education {
  name: String!
  type: String!
}

type EducationConnection {
  pageInfo: PageInfo!
  edges: [EducationEdge]!
  aggregate: AggregateEducation!
}

input EducationCreateInput {
  name: String!
  type: String!
}

input EducationCreateManyInput {
  create: [EducationCreateInput!]
}

type EducationEdge {
  node: Education!
  cursor: String!
}

enum EducationOrderByInput {
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EducationPreviousValues {
  name: String!
  type: String!
}

type EducationSubscriptionPayload {
  mutation: MutationType!
  node: Education
  updatedFields: [String!]
  previousValues: EducationPreviousValues
}

input EducationSubscriptionWhereInput {
  AND: [EducationSubscriptionWhereInput!]
  OR: [EducationSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EducationWhereInput
}

input EducationUpdateInput {
  name: String
  type: String
}

input EducationUpdateManyInput {
  create: [EducationCreateInput!]
}

input EducationWhereInput {
  AND: [EducationWhereInput!]
  OR: [EducationWhereInput!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
}

enum GENDER {
  MALE
  FEMALE
}

enum LANGUAGES {
  FR
  EN
}

type LocationConnection {
  pageInfo: PageInfo!
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  lat: Float!
  lng: Float!
  city: String
  country: String
}

input LocationCreateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

type LocationEdge {
  node: Location!
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
  createdAt_ASC
  createdAt_DESC
  city_ASC
  city_DESC
  country_ASC
  country_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LocationPreviousValues {
  id: ID!
  lat: Float!
  lng: Float!
  createdAt: DateTime!
  city: String
  country: String
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  AND: [LocationSubscriptionWhereInput!]
  OR: [LocationSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationUpdateInput {
  lat: Float
  lng: Float
  city: String
  country: String
}

input LocationUpdateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: LocationWhereUniqueInput
  delete: LocationWhereUniqueInput
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  lat: Float
  lat_not: Float
  lat_in: [Float!]
  lat_not_in: [Float!]
  lat_lt: Float
  lat_lte: Float
  lat_gt: Float
  lat_gte: Float
  lng: Float
  lng_not: Float
  lng_in: [Float!]
  lng_not_in: [Float!]
  lng_lt: Float
  lng_lte: Float
  lng_gt: Float
  lng_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
}

input LocationWhereUniqueInput {
  id: ID
}

scalar Long

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  deliveredAt: DateTime!
  readAt: DateTime!
  from: UserCreateOneWithoutSentMessagesInput!
  to: UserCreateOneWithoutReceivedMessagesInput!
  date: DateCreateOneInput
}

input MessageCreateManyWithoutFromInput {
  create: [MessageCreateWithoutFromInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutToInput {
  create: [MessageCreateWithoutToInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutFromInput {
  deliveredAt: DateTime!
  readAt: DateTime!
  to: UserCreateOneWithoutReceivedMessagesInput!
  date: DateCreateOneInput
}

input MessageCreateWithoutToInput {
  deliveredAt: DateTime!
  readAt: DateTime!
  from: UserCreateOneWithoutSentMessagesInput!
  date: DateCreateOneInput
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  deliveredAt_ASC
  deliveredAt_DESC
  readAt_ASC
  readAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  deliveredAt: DateTime!
  readAt: DateTime!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

input MessageUpdateInput {
  deliveredAt: DateTime
  readAt: DateTime
  from: UserUpdateOneWithoutSentMessagesInput
  to: UserUpdateOneWithoutReceivedMessagesInput
  date: DateUpdateOneInput
}

input MessageUpdateManyWithoutFromInput {
  create: [MessageCreateWithoutFromInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithoutFromInput!]
  upsert: [MessageUpsertWithoutFromInput!]
}

input MessageUpdateManyWithoutToInput {
  create: [MessageCreateWithoutToInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithoutToInput!]
  upsert: [MessageUpsertWithoutToInput!]
}

input MessageUpdateWithoutFromDataInput {
  deliveredAt: DateTime
  readAt: DateTime
  to: UserUpdateOneWithoutReceivedMessagesInput
  date: DateUpdateOneInput
}

input MessageUpdateWithoutFromInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutFromDataInput!
}

input MessageUpdateWithoutToDataInput {
  deliveredAt: DateTime
  readAt: DateTime
  from: UserUpdateOneWithoutSentMessagesInput
  date: DateUpdateOneInput
}

input MessageUpdateWithoutToInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutToDataInput!
}

input MessageUpsertWithoutFromInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutFromDataInput!
  create: MessageCreateWithoutFromInput!
}

input MessageUpsertWithoutToInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutToDataInput!
  create: MessageCreateWithoutToInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deliveredAt: DateTime
  deliveredAt_not: DateTime
  deliveredAt_in: [DateTime!]
  deliveredAt_not_in: [DateTime!]
  deliveredAt_lt: DateTime
  deliveredAt_lte: DateTime
  deliveredAt_gt: DateTime
  deliveredAt_gte: DateTime
  readAt: DateTime
  readAt_not: DateTime
  readAt_in: [DateTime!]
  readAt_not_in: [DateTime!]
  readAt_lt: DateTime
  readAt_lte: DateTime
  readAt_gt: DateTime
  readAt_gte: DateTime
  from: UserWhereInput
  to: UserWhereInput
  date: DateWhereInput
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createEducation(data: EducationCreateInput!): Education!
  createWork(data: WorkCreateInput!): Work!
  createPhoto(data: PhotoCreateInput!): Photo!
  createLocation(data: LocationCreateInput!): Location!
  createAgeFilter(data: AgeFilterCreateInput!): AgeFilter!
  createNotificationSettings(data: NotificationSettingsCreateInput!): NotificationSettings!
  createPlace(data: PlaceCreateInput!): Place!
  createDate(data: DateCreateInput!): Date!
  createMessage(data: MessageCreateInput!): Message!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateNotificationSettings(data: NotificationSettingsUpdateInput!, where: NotificationSettingsWhereUniqueInput!): NotificationSettings
  updatePlace(data: PlaceUpdateInput!, where: PlaceWhereUniqueInput!): Place
  updateDate(data: DateUpdateInput!, where: DateWhereUniqueInput!): Date
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  deleteUser(where: UserWhereUniqueInput!): User
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteNotificationSettings(where: NotificationSettingsWhereUniqueInput!): NotificationSettings
  deletePlace(where: PlaceWhereUniqueInput!): Place
  deleteDate(where: DateWhereUniqueInput!): Date
  deleteMessage(where: MessageWhereUniqueInput!): Message
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  upsertNotificationSettings(where: NotificationSettingsWhereUniqueInput!, create: NotificationSettingsCreateInput!, update: NotificationSettingsUpdateInput!): NotificationSettings!
  upsertPlace(where: PlaceWhereUniqueInput!, create: PlaceCreateInput!, update: PlaceUpdateInput!): Place!
  upsertDate(where: DateWhereUniqueInput!, create: DateCreateInput!, update: DateUpdateInput!): Date!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyEducations(data: EducationUpdateInput!, where: EducationWhereInput!): BatchPayload!
  updateManyWorks(data: WorkUpdateInput!, where: WorkWhereInput!): BatchPayload!
  updateManyPhotos(data: PhotoUpdateInput!, where: PhotoWhereInput!): BatchPayload!
  updateManyLocations(data: LocationUpdateInput!, where: LocationWhereInput!): BatchPayload!
  updateManyAgeFilters(data: AgeFilterUpdateInput!, where: AgeFilterWhereInput!): BatchPayload!
  updateManyNotificationSettingses(data: NotificationSettingsUpdateInput!, where: NotificationSettingsWhereInput!): BatchPayload!
  updateManyPlaces(data: PlaceUpdateInput!, where: PlaceWhereInput!): BatchPayload!
  updateManyDates(data: DateUpdateInput!, where: DateWhereInput!): BatchPayload!
  updateManyMessages(data: MessageUpdateInput!, where: MessageWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyEducations(where: EducationWhereInput!): BatchPayload!
  deleteManyWorks(where: WorkWhereInput!): BatchPayload!
  deleteManyPhotos(where: PhotoWhereInput!): BatchPayload!
  deleteManyLocations(where: LocationWhereInput!): BatchPayload!
  deleteManyAgeFilters(where: AgeFilterWhereInput!): BatchPayload!
  deleteManyNotificationSettingses(where: NotificationSettingsWhereInput!): BatchPayload!
  deleteManyPlaces(where: PlaceWhereInput!): BatchPayload!
  deleteManyDates(where: DateWhereInput!): BatchPayload!
  deleteManyMessages(where: MessageWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type NotificationSettingsConnection {
  pageInfo: PageInfo!
  edges: [NotificationSettingsEdge]!
  aggregate: AggregateNotificationSettings!
}

input NotificationSettingsCreateInput {
  onInvite: Boolean
  onMessage: Boolean
  onGeneral: Boolean
  onWink: Boolean
  onWinkConfirmation: Boolean
  user: UserCreateOneWithoutNotificationSettingsInput!
}

input NotificationSettingsCreateOneWithoutUserInput {
  create: NotificationSettingsCreateWithoutUserInput
  connect: NotificationSettingsWhereUniqueInput
}

input NotificationSettingsCreateWithoutUserInput {
  onInvite: Boolean
  onMessage: Boolean
  onGeneral: Boolean
  onWink: Boolean
  onWinkConfirmation: Boolean
}

type NotificationSettingsEdge {
  node: NotificationSettings!
  cursor: String!
}

enum NotificationSettingsOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  onInvite_ASC
  onInvite_DESC
  onMessage_ASC
  onMessage_DESC
  onGeneral_ASC
  onGeneral_DESC
  onWink_ASC
  onWink_DESC
  onWinkConfirmation_ASC
  onWinkConfirmation_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NotificationSettingsPreviousValues {
  id: ID!
  createdAt: DateTime!
  onInvite: Boolean!
  onMessage: Boolean!
  onGeneral: Boolean!
  onWink: Boolean!
  onWinkConfirmation: Boolean!
}

type NotificationSettingsSubscriptionPayload {
  mutation: MutationType!
  node: NotificationSettings
  updatedFields: [String!]
  previousValues: NotificationSettingsPreviousValues
}

input NotificationSettingsSubscriptionWhereInput {
  AND: [NotificationSettingsSubscriptionWhereInput!]
  OR: [NotificationSettingsSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationSettingsWhereInput
}

input NotificationSettingsUpdateInput {
  onInvite: Boolean
  onMessage: Boolean
  onGeneral: Boolean
  onWink: Boolean
  onWinkConfirmation: Boolean
  user: UserUpdateOneWithoutNotificationSettingsInput
}

input NotificationSettingsUpdateOneWithoutUserInput {
  create: NotificationSettingsCreateWithoutUserInput
  connect: NotificationSettingsWhereUniqueInput
  disconnect: NotificationSettingsWhereUniqueInput
  delete: NotificationSettingsWhereUniqueInput
  update: NotificationSettingsUpdateWithoutUserInput
  upsert: NotificationSettingsUpsertWithoutUserInput
}

input NotificationSettingsUpdateWithoutUserDataInput {
  onInvite: Boolean
  onMessage: Boolean
  onGeneral: Boolean
  onWink: Boolean
  onWinkConfirmation: Boolean
}

input NotificationSettingsUpdateWithoutUserInput {
  where: NotificationSettingsWhereUniqueInput!
  data: NotificationSettingsUpdateWithoutUserDataInput!
}

input NotificationSettingsUpsertWithoutUserInput {
  where: NotificationSettingsWhereUniqueInput!
  update: NotificationSettingsUpdateWithoutUserDataInput!
  create: NotificationSettingsCreateWithoutUserInput!
}

input NotificationSettingsWhereInput {
  AND: [NotificationSettingsWhereInput!]
  OR: [NotificationSettingsWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  onInvite: Boolean
  onInvite_not: Boolean
  onMessage: Boolean
  onMessage_not: Boolean
  onGeneral: Boolean
  onGeneral_not: Boolean
  onWink: Boolean
  onWink_not: Boolean
  onWinkConfirmation: Boolean
  onWinkConfirmation_not: Boolean
  user: UserWhereInput
}

input NotificationSettingsWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Photo {
  url: String!
}

type PhotoConnection {
  pageInfo: PageInfo!
  edges: [PhotoEdge]!
  aggregate: AggregatePhoto!
}

input PhotoCreateInput {
  url: String!
}

input PhotoCreateManyInput {
  create: [PhotoCreateInput!]
}

type PhotoEdge {
  node: Photo!
  cursor: String!
}

enum PhotoOrderByInput {
  url_ASC
  url_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PhotoPreviousValues {
  url: String!
}

type PhotoSubscriptionPayload {
  mutation: MutationType!
  node: Photo
  updatedFields: [String!]
  previousValues: PhotoPreviousValues
}

input PhotoSubscriptionWhereInput {
  AND: [PhotoSubscriptionWhereInput!]
  OR: [PhotoSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PhotoWhereInput
}

input PhotoUpdateInput {
  url: String
}

input PhotoUpdateManyInput {
  create: [PhotoCreateInput!]
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
}

type PlaceConnection {
  pageInfo: PageInfo!
  edges: [PlaceEdge]!
  aggregate: AggregatePlace!
}

input PlaceCreatecuratedFieldsInput {
  set: [String!]
}

input PlaceCreateInput {
  name: String!
  priceRating: Int
  googlePlacesId: String!
  weight: Int!
  website: String
  phone: String
  address: String
  fromGoogle: Boolean
  state: String
  lastGoogleUpdate: DateTime
  description: String
  detailsFetched: Boolean
  openingHours: PlaceCreateopeningHoursInput
  types: PlaceCreatetypesInput
  curatedFields: PlaceCreatecuratedFieldsInput
  location: LocationCreateOneInput!
  users: UserCreateManyWithoutPlacesInput
}

input PlaceCreateManyWithoutUsersInput {
  create: [PlaceCreateWithoutUsersInput!]
  connect: [PlaceWhereUniqueInput!]
}

input PlaceCreateOneInput {
  create: PlaceCreateInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateopeningHoursInput {
  set: [String!]
}

input PlaceCreatetypesInput {
  set: [String!]
}

input PlaceCreateWithoutUsersInput {
  name: String!
  priceRating: Int
  googlePlacesId: String!
  weight: Int!
  website: String
  phone: String
  address: String
  fromGoogle: Boolean
  state: String
  lastGoogleUpdate: DateTime
  description: String
  detailsFetched: Boolean
  openingHours: PlaceCreateopeningHoursInput
  types: PlaceCreatetypesInput
  curatedFields: PlaceCreatecuratedFieldsInput
  location: LocationCreateOneInput!
}

type PlaceEdge {
  node: Place!
  cursor: String!
}

enum PlaceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  priceRating_ASC
  priceRating_DESC
  googlePlacesId_ASC
  googlePlacesId_DESC
  createdAt_ASC
  createdAt_DESC
  weight_ASC
  weight_DESC
  website_ASC
  website_DESC
  phone_ASC
  phone_DESC
  address_ASC
  address_DESC
  fromGoogle_ASC
  fromGoogle_DESC
  state_ASC
  state_DESC
  lastGoogleUpdate_ASC
  lastGoogleUpdate_DESC
  description_ASC
  description_DESC
  detailsFetched_ASC
  detailsFetched_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PlacePreviousValues {
  id: ID!
  name: String!
  priceRating: Int
  googlePlacesId: String!
  createdAt: DateTime!
  weight: Int!
  website: String
  phone: String
  address: String
  openingHours: [String!]
  types: [String!]
  fromGoogle: Boolean
  state: String
  lastGoogleUpdate: DateTime
  curatedFields: [String!]
  description: String
  detailsFetched: Boolean!
}

type PlaceSubscriptionPayload {
  mutation: MutationType!
  node: Place
  updatedFields: [String!]
  previousValues: PlacePreviousValues
}

input PlaceSubscriptionWhereInput {
  AND: [PlaceSubscriptionWhereInput!]
  OR: [PlaceSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlaceWhereInput
}

input PlaceUpdatecuratedFieldsInput {
  set: [String!]
}

input PlaceUpdateInput {
  name: String
  priceRating: Int
  googlePlacesId: String
  weight: Int
  website: String
  phone: String
  address: String
  fromGoogle: Boolean
  state: String
  lastGoogleUpdate: DateTime
  description: String
  detailsFetched: Boolean
  openingHours: PlaceUpdateopeningHoursInput
  types: PlaceUpdatetypesInput
  curatedFields: PlaceUpdatecuratedFieldsInput
  location: LocationUpdateOneInput
  users: UserUpdateManyWithoutPlacesInput
}

input PlaceUpdateManyWithoutUsersInput {
  create: [PlaceCreateWithoutUsersInput!]
  connect: [PlaceWhereUniqueInput!]
  disconnect: [PlaceWhereUniqueInput!]
  delete: [PlaceWhereUniqueInput!]
  update: [PlaceUpdateWithoutUsersInput!]
  upsert: [PlaceUpsertWithoutUsersInput!]
}

input PlaceUpdateOneInput {
  create: PlaceCreateInput
  connect: PlaceWhereUniqueInput
  disconnect: PlaceWhereUniqueInput
  delete: PlaceWhereUniqueInput
}

input PlaceUpdateopeningHoursInput {
  set: [String!]
}

input PlaceUpdatetypesInput {
  set: [String!]
}

input PlaceUpdateWithoutUsersDataInput {
  name: String
  priceRating: Int
  googlePlacesId: String
  weight: Int
  website: String
  phone: String
  address: String
  fromGoogle: Boolean
  state: String
  lastGoogleUpdate: DateTime
  description: String
  detailsFetched: Boolean
  openingHours: PlaceUpdateopeningHoursInput
  types: PlaceUpdatetypesInput
  curatedFields: PlaceUpdatecuratedFieldsInput
  location: LocationUpdateOneInput
}

input PlaceUpdateWithoutUsersInput {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateWithoutUsersDataInput!
}

input PlaceUpsertWithoutUsersInput {
  where: PlaceWhereUniqueInput!
  update: PlaceUpdateWithoutUsersDataInput!
  create: PlaceCreateWithoutUsersInput!
}

input PlaceWhereInput {
  AND: [PlaceWhereInput!]
  OR: [PlaceWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  priceRating: Int
  priceRating_not: Int
  priceRating_in: [Int!]
  priceRating_not_in: [Int!]
  priceRating_lt: Int
  priceRating_lte: Int
  priceRating_gt: Int
  priceRating_gte: Int
  googlePlacesId: String
  googlePlacesId_not: String
  googlePlacesId_in: [String!]
  googlePlacesId_not_in: [String!]
  googlePlacesId_lt: String
  googlePlacesId_lte: String
  googlePlacesId_gt: String
  googlePlacesId_gte: String
  googlePlacesId_contains: String
  googlePlacesId_not_contains: String
  googlePlacesId_starts_with: String
  googlePlacesId_not_starts_with: String
  googlePlacesId_ends_with: String
  googlePlacesId_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  fromGoogle: Boolean
  fromGoogle_not: Boolean
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  lastGoogleUpdate: DateTime
  lastGoogleUpdate_not: DateTime
  lastGoogleUpdate_in: [DateTime!]
  lastGoogleUpdate_not_in: [DateTime!]
  lastGoogleUpdate_lt: DateTime
  lastGoogleUpdate_lte: DateTime
  lastGoogleUpdate_gt: DateTime
  lastGoogleUpdate_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  detailsFetched: Boolean
  detailsFetched_not: Boolean
  location: LocationWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input PlaceWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  educations(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Education]!
  works(where: WorkWhereInput, orderBy: WorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Work]!
  photos(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Photo]!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  ageFilters(where: AgeFilterWhereInput, orderBy: AgeFilterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AgeFilter]!
  notificationSettingses(where: NotificationSettingsWhereInput, orderBy: NotificationSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationSettings]!
  places(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Place]!
  dates(where: DateWhereInput, orderBy: DateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Date]!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  user(where: UserWhereUniqueInput!): User
  location(where: LocationWhereUniqueInput!): Location
  notificationSettings(where: NotificationSettingsWhereUniqueInput!): NotificationSettings
  place(where: PlaceWhereUniqueInput!): Place
  date(where: DateWhereUniqueInput!): Date
  message(where: MessageWhereUniqueInput!): Message
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  educationsConnection(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EducationConnection!
  worksConnection(where: WorkWhereInput, orderBy: WorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkConnection!
  photosConnection(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhotoConnection!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  ageFiltersConnection(where: AgeFilterWhereInput, orderBy: AgeFilterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AgeFilterConnection!
  notificationSettingsesConnection(where: NotificationSettingsWhereInput, orderBy: NotificationSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationSettingsConnection!
  placesConnection(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaceConnection!
  datesConnection(where: DateWhereInput, orderBy: DateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DateConnection!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  node(id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  education(where: EducationSubscriptionWhereInput): EducationSubscriptionPayload
  work(where: WorkSubscriptionWhereInput): WorkSubscriptionPayload
  photo(where: PhotoSubscriptionWhereInput): PhotoSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  ageFilter(where: AgeFilterSubscriptionWhereInput): AgeFilterSubscriptionPayload
  notificationSettings(where: NotificationSettingsSubscriptionWhereInput): NotificationSettingsSubscriptionPayload
  place(where: PlaceSubscriptionWhereInput): PlaceSubscriptionPayload
  date(where: DateSubscriptionWhereInput): DateSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  places: PlaceCreateManyWithoutUsersInput
  reported: UserCreateManyWithoutReportedInput
  uninterested: UserCreateManyWithoutUninterestedInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  sentDates: DateCreateManyWithoutInviterInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

input UserCreateManyWithoutPlacesInput {
  create: [UserCreateWithoutPlacesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutReportedInput {
  create: [UserCreateWithoutReportedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUninterestedInput {
  create: [UserCreateWithoutUninterestedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutNotificationSettingsInput {
  create: UserCreateWithoutNotificationSettingsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReceivedDatesInput {
  create: UserCreateWithoutReceivedDatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReceivedMessagesInput {
  create: UserCreateWithoutReceivedMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentDatesInput {
  create: UserCreateWithoutSentDatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentMessagesInput {
  create: UserCreateWithoutSentMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreatetargetGendersInput {
  set: [GENDER!]
}

input UserCreateWithoutNotificationSettingsInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  places: PlaceCreateManyWithoutUsersInput
  reported: UserCreateManyWithoutReportedInput
  uninterested: UserCreateManyWithoutUninterestedInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  sentDates: DateCreateManyWithoutInviterInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

input UserCreateWithoutPlacesInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  reported: UserCreateManyWithoutReportedInput
  uninterested: UserCreateManyWithoutUninterestedInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  sentDates: DateCreateManyWithoutInviterInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

input UserCreateWithoutReceivedDatesInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  places: PlaceCreateManyWithoutUsersInput
  reported: UserCreateManyWithoutReportedInput
  uninterested: UserCreateManyWithoutUninterestedInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  sentDates: DateCreateManyWithoutInviterInput
}

input UserCreateWithoutReceivedMessagesInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  places: PlaceCreateManyWithoutUsersInput
  reported: UserCreateManyWithoutReportedInput
  uninterested: UserCreateManyWithoutUninterestedInput
  sentMessages: MessageCreateManyWithoutFromInput
  sentDates: DateCreateManyWithoutInviterInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

input UserCreateWithoutReportedInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  places: PlaceCreateManyWithoutUsersInput
  uninterested: UserCreateManyWithoutUninterestedInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  sentDates: DateCreateManyWithoutInviterInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

input UserCreateWithoutSentDatesInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  places: PlaceCreateManyWithoutUsersInput
  reported: UserCreateManyWithoutReportedInput
  uninterested: UserCreateManyWithoutUninterestedInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

input UserCreateWithoutSentMessagesInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  places: PlaceCreateManyWithoutUsersInput
  reported: UserCreateManyWithoutReportedInput
  uninterested: UserCreateManyWithoutUninterestedInput
  receivedMessages: MessageCreateManyWithoutToInput
  sentDates: DateCreateManyWithoutInviterInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

input UserCreateWithoutUninterestedInput {
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserCreatetargetGendersInput
  education: EducationCreateManyInput
  work: WorkCreateManyInput
  photos: PhotoCreateManyInput
  location: LocationCreateOneInput
  ageFilter: AgeFilterCreateOneInput
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput
  places: PlaceCreateManyWithoutUsersInput
  reported: UserCreateManyWithoutReportedInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  sentDates: DateCreateManyWithoutInviterInput
  receivedDates: DateCreateManyWithoutInviteeInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  facebookUserId_ASC
  facebookUserId_DESC
  name_ASC
  name_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  birthday_ASC
  birthday_DESC
  locale_ASC
  locale_DESC
  email_ASC
  email_DESC
  gender_ASC
  gender_DESC
  bio_ASC
  bio_DESC
  lastLogin_ASC
  lastLogin_DESC
  distanceFilter_ASC
  distanceFilter_DESC
  oneSignalId_ASC
  oneSignalId_DESC
  createdAt_ASC
  createdAt_DESC
  onboarding_ASC
  onboarding_DESC
  hideAge_ASC
  hideAge_DESC
  language_ASC
  language_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  facebookUserId: String!
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  email: String
  gender: GENDER!
  targetGenders: [GENDER!]
  bio: String
  lastLogin: DateTime!
  distanceFilter: Int
  oneSignalId: String
  createdAt: DateTime!
  onboarding: Boolean!
  hideAge: Boolean!
  language: LANGUAGES!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  places: PlaceUpdateManyWithoutUsersInput
  reported: UserUpdateManyWithoutReportedInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  sentDates: DateUpdateManyWithoutInviterInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateManyWithoutPlacesInput {
  create: [UserCreateWithoutPlacesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutPlacesInput!]
  upsert: [UserUpsertWithoutPlacesInput!]
}

input UserUpdateManyWithoutReportedInput {
  create: [UserCreateWithoutReportedInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutReportedInput!]
  upsert: [UserUpsertWithoutReportedInput!]
}

input UserUpdateManyWithoutUninterestedInput {
  create: [UserCreateWithoutUninterestedInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutUninterestedInput!]
  upsert: [UserUpsertWithoutUninterestedInput!]
}

input UserUpdateOneWithoutNotificationSettingsInput {
  create: UserCreateWithoutNotificationSettingsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutNotificationSettingsInput
  upsert: UserUpsertWithoutNotificationSettingsInput
}

input UserUpdateOneWithoutReceivedDatesInput {
  create: UserCreateWithoutReceivedDatesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutReceivedDatesInput
  upsert: UserUpsertWithoutReceivedDatesInput
}

input UserUpdateOneWithoutReceivedMessagesInput {
  create: UserCreateWithoutReceivedMessagesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutReceivedMessagesInput
  upsert: UserUpsertWithoutReceivedMessagesInput
}

input UserUpdateOneWithoutSentDatesInput {
  create: UserCreateWithoutSentDatesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutSentDatesInput
  upsert: UserUpsertWithoutSentDatesInput
}

input UserUpdateOneWithoutSentMessagesInput {
  create: UserCreateWithoutSentMessagesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutSentMessagesInput
  upsert: UserUpsertWithoutSentMessagesInput
}

input UserUpdatetargetGendersInput {
  set: [GENDER!]
}

input UserUpdateWithoutNotificationSettingsDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  places: PlaceUpdateManyWithoutUsersInput
  reported: UserUpdateManyWithoutReportedInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  sentDates: DateUpdateManyWithoutInviterInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateWithoutNotificationSettingsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutNotificationSettingsDataInput!
}

input UserUpdateWithoutPlacesDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  reported: UserUpdateManyWithoutReportedInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  sentDates: DateUpdateManyWithoutInviterInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateWithoutPlacesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPlacesDataInput!
}

input UserUpdateWithoutReceivedDatesDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  places: PlaceUpdateManyWithoutUsersInput
  reported: UserUpdateManyWithoutReportedInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  sentDates: DateUpdateManyWithoutInviterInput
}

input UserUpdateWithoutReceivedDatesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutReceivedDatesDataInput!
}

input UserUpdateWithoutReceivedMessagesDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  places: PlaceUpdateManyWithoutUsersInput
  reported: UserUpdateManyWithoutReportedInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  sentDates: DateUpdateManyWithoutInviterInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateWithoutReceivedMessagesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutReceivedMessagesDataInput!
}

input UserUpdateWithoutReportedDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  places: PlaceUpdateManyWithoutUsersInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  sentDates: DateUpdateManyWithoutInviterInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateWithoutReportedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutReportedDataInput!
}

input UserUpdateWithoutSentDatesDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  places: PlaceUpdateManyWithoutUsersInput
  reported: UserUpdateManyWithoutReportedInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateWithoutSentDatesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSentDatesDataInput!
}

input UserUpdateWithoutSentMessagesDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  places: PlaceUpdateManyWithoutUsersInput
  reported: UserUpdateManyWithoutReportedInput
  uninterested: UserUpdateManyWithoutUninterestedInput
  receivedMessages: MessageUpdateManyWithoutToInput
  sentDates: DateUpdateManyWithoutInviterInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateWithoutSentMessagesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSentMessagesDataInput!
}

input UserUpdateWithoutUninterestedDataInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday: DateTime
  locale: String
  email: String
  gender: GENDER
  bio: String
  lastLogin: DateTime
  distanceFilter: Int
  oneSignalId: String
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  targetGenders: UserUpdatetargetGendersInput
  education: EducationUpdateManyInput
  work: WorkUpdateManyInput
  photos: PhotoUpdateManyInput
  location: LocationUpdateOneInput
  ageFilter: AgeFilterUpdateOneInput
  notificationSettings: NotificationSettingsUpdateOneWithoutUserInput
  places: PlaceUpdateManyWithoutUsersInput
  reported: UserUpdateManyWithoutReportedInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  sentDates: DateUpdateManyWithoutInviterInput
  receivedDates: DateUpdateManyWithoutInviteeInput
}

input UserUpdateWithoutUninterestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutUninterestedDataInput!
}

input UserUpsertWithoutNotificationSettingsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutNotificationSettingsDataInput!
  create: UserCreateWithoutNotificationSettingsInput!
}

input UserUpsertWithoutPlacesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPlacesDataInput!
  create: UserCreateWithoutPlacesInput!
}

input UserUpsertWithoutReceivedDatesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutReceivedDatesDataInput!
  create: UserCreateWithoutReceivedDatesInput!
}

input UserUpsertWithoutReceivedMessagesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutReceivedMessagesDataInput!
  create: UserCreateWithoutReceivedMessagesInput!
}

input UserUpsertWithoutReportedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutReportedDataInput!
  create: UserCreateWithoutReportedInput!
}

input UserUpsertWithoutSentDatesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSentDatesDataInput!
  create: UserCreateWithoutSentDatesInput!
}

input UserUpsertWithoutSentMessagesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSentMessagesDataInput!
  create: UserCreateWithoutSentMessagesInput!
}

input UserUpsertWithoutUninterestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutUninterestedDataInput!
  create: UserCreateWithoutUninterestedInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  facebookUserId: String
  facebookUserId_not: String
  facebookUserId_in: [String!]
  facebookUserId_not_in: [String!]
  facebookUserId_lt: String
  facebookUserId_lte: String
  facebookUserId_gt: String
  facebookUserId_gte: String
  facebookUserId_contains: String
  facebookUserId_not_contains: String
  facebookUserId_starts_with: String
  facebookUserId_not_starts_with: String
  facebookUserId_ends_with: String
  facebookUserId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  birthday: DateTime
  birthday_not: DateTime
  birthday_in: [DateTime!]
  birthday_not_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  locale: String
  locale_not: String
  locale_in: [String!]
  locale_not_in: [String!]
  locale_lt: String
  locale_lte: String
  locale_gt: String
  locale_gte: String
  locale_contains: String
  locale_not_contains: String
  locale_starts_with: String
  locale_not_starts_with: String
  locale_ends_with: String
  locale_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  gender: GENDER
  gender_not: GENDER
  gender_in: [GENDER!]
  gender_not_in: [GENDER!]
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  lastLogin: DateTime
  lastLogin_not: DateTime
  lastLogin_in: [DateTime!]
  lastLogin_not_in: [DateTime!]
  lastLogin_lt: DateTime
  lastLogin_lte: DateTime
  lastLogin_gt: DateTime
  lastLogin_gte: DateTime
  distanceFilter: Int
  distanceFilter_not: Int
  distanceFilter_in: [Int!]
  distanceFilter_not_in: [Int!]
  distanceFilter_lt: Int
  distanceFilter_lte: Int
  distanceFilter_gt: Int
  distanceFilter_gte: Int
  oneSignalId: String
  oneSignalId_not: String
  oneSignalId_in: [String!]
  oneSignalId_not_in: [String!]
  oneSignalId_lt: String
  oneSignalId_lte: String
  oneSignalId_gt: String
  oneSignalId_gte: String
  oneSignalId_contains: String
  oneSignalId_not_contains: String
  oneSignalId_starts_with: String
  oneSignalId_not_starts_with: String
  oneSignalId_ends_with: String
  oneSignalId_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  onboarding: Boolean
  onboarding_not: Boolean
  hideAge: Boolean
  hideAge_not: Boolean
  language: LANGUAGES
  language_not: LANGUAGES
  language_in: [LANGUAGES!]
  language_not_in: [LANGUAGES!]
  education_every: EducationWhereInput
  education_some: EducationWhereInput
  education_none: EducationWhereInput
  work_every: WorkWhereInput
  work_some: WorkWhereInput
  work_none: WorkWhereInput
  photos_every: PhotoWhereInput
  photos_some: PhotoWhereInput
  photos_none: PhotoWhereInput
  location: LocationWhereInput
  ageFilter: AgeFilterWhereInput
  notificationSettings: NotificationSettingsWhereInput
  places_every: PlaceWhereInput
  places_some: PlaceWhereInput
  places_none: PlaceWhereInput
  reported_every: UserWhereInput
  reported_some: UserWhereInput
  reported_none: UserWhereInput
  uninterested_every: UserWhereInput
  uninterested_some: UserWhereInput
  uninterested_none: UserWhereInput
  sentMessages_every: MessageWhereInput
  sentMessages_some: MessageWhereInput
  sentMessages_none: MessageWhereInput
  receivedMessages_every: MessageWhereInput
  receivedMessages_some: MessageWhereInput
  receivedMessages_none: MessageWhereInput
  sentDates_every: DateWhereInput
  sentDates_some: DateWhereInput
  sentDates_none: DateWhereInput
  receivedDates_every: DateWhereInput
  receivedDates_some: DateWhereInput
  receivedDates_none: DateWhereInput
}

input UserWhereUniqueInput {
  id: ID
  facebookUserId: String
}

type Work {
  employer: String!
  location: String!
  position: String!
}

type WorkConnection {
  pageInfo: PageInfo!
  edges: [WorkEdge]!
  aggregate: AggregateWork!
}

input WorkCreateInput {
  employer: String!
  location: String!
  position: String!
}

input WorkCreateManyInput {
  create: [WorkCreateInput!]
}

type WorkEdge {
  node: Work!
  cursor: String!
}

enum WorkOrderByInput {
  employer_ASC
  employer_DESC
  location_ASC
  location_DESC
  position_ASC
  position_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkPreviousValues {
  employer: String!
  location: String!
  position: String!
}

type WorkSubscriptionPayload {
  mutation: MutationType!
  node: Work
  updatedFields: [String!]
  previousValues: WorkPreviousValues
}

input WorkSubscriptionWhereInput {
  AND: [WorkSubscriptionWhereInput!]
  OR: [WorkSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkWhereInput
}

input WorkUpdateInput {
  employer: String
  location: String
  position: String
}

input WorkUpdateManyInput {
  create: [WorkCreateInput!]
}

input WorkWhereInput {
  AND: [WorkWhereInput!]
  OR: [WorkWhereInput!]
  employer: String
  employer_not: String
  employer_in: [String!]
  employer_not_in: [String!]
  employer_lt: String
  employer_lte: String
  employer_gt: String
  employer_gte: String
  employer_contains: String
  employer_not_contains: String
  employer_starts_with: String
  employer_not_starts_with: String
  employer_ends_with: String
  employer_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
}
`

export type DateOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'status_ASC' |
  'status_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'isPaying_ASC' |
  'isPaying_DESC' |
  'seen_ASC' |
  'seen_DESC' |
  'isCommonPlace_ASC' |
  'isCommonPlace_DESC' |
  'requestingChat_ASC' |
  'requestingChat_DESC' |
  'inviterReadMessage_ASC' |
  'inviterReadMessage_DESC' |
  'inviteeReadMessage_ASC' |
  'inviteeReadMessage_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type DATE_STATUS = 
  'PENDING' |
  'ACCEPTED' |
  'REFUSED'

export type MessageOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'deliveredAt_ASC' |
  'deliveredAt_DESC' |
  'readAt_ASC' |
  'readAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type NotificationSettingsOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'onInvite_ASC' |
  'onInvite_DESC' |
  'onMessage_ASC' |
  'onMessage_DESC' |
  'onGeneral_ASC' |
  'onGeneral_DESC' |
  'onWink_ASC' |
  'onWink_DESC' |
  'onWinkConfirmation_ASC' |
  'onWinkConfirmation_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type PlaceOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'priceRating_ASC' |
  'priceRating_DESC' |
  'googlePlacesId_ASC' |
  'googlePlacesId_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'weight_ASC' |
  'weight_DESC' |
  'website_ASC' |
  'website_DESC' |
  'phone_ASC' |
  'phone_DESC' |
  'address_ASC' |
  'address_DESC' |
  'fromGoogle_ASC' |
  'fromGoogle_DESC' |
  'state_ASC' |
  'state_DESC' |
  'lastGoogleUpdate_ASC' |
  'lastGoogleUpdate_DESC' |
  'description_ASC' |
  'description_DESC' |
  'detailsFetched_ASC' |
  'detailsFetched_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type AgeFilterOrderByInput = 
  'min_ASC' |
  'min_DESC' |
  'max_ASC' |
  'max_DESC' |
  'id_ASC' |
  'id_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type UserOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'facebookUserId_ASC' |
  'facebookUserId_DESC' |
  'name_ASC' |
  'name_DESC' |
  'first_name_ASC' |
  'first_name_DESC' |
  'last_name_ASC' |
  'last_name_DESC' |
  'birthday_ASC' |
  'birthday_DESC' |
  'locale_ASC' |
  'locale_DESC' |
  'email_ASC' |
  'email_DESC' |
  'gender_ASC' |
  'gender_DESC' |
  'bio_ASC' |
  'bio_DESC' |
  'lastLogin_ASC' |
  'lastLogin_DESC' |
  'distanceFilter_ASC' |
  'distanceFilter_DESC' |
  'oneSignalId_ASC' |
  'oneSignalId_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'onboarding_ASC' |
  'onboarding_DESC' |
  'hideAge_ASC' |
  'hideAge_DESC' |
  'language_ASC' |
  'language_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type EducationOrderByInput = 
  'name_ASC' |
  'name_DESC' |
  'type_ASC' |
  'type_DESC' |
  'id_ASC' |
  'id_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type WorkOrderByInput = 
  'employer_ASC' |
  'employer_DESC' |
  'location_ASC' |
  'location_DESC' |
  'position_ASC' |
  'position_DESC' |
  'id_ASC' |
  'id_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type PhotoOrderByInput = 
  'url_ASC' |
  'url_DESC' |
  'id_ASC' |
  'id_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type LocationOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'lat_ASC' |
  'lat_DESC' |
  'lng_ASC' |
  'lng_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'city_ASC' |
  'city_DESC' |
  'country_ASC' |
  'country_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type GENDER = 
  'MALE' |
  'FEMALE'

export type MutationType = 
  'CREATED' |
  'UPDATED' |
  'DELETED'

export type LANGUAGES = 
  'FR' |
  'EN'

export interface UserCreateManyWithoutPlacesInput {
  create?: UserCreateWithoutPlacesInput[] | UserCreateWithoutPlacesInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
}

export interface UserWhereInput {
  AND?: UserWhereInput[] | UserWhereInput
  OR?: UserWhereInput[] | UserWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  facebookUserId?: String
  facebookUserId_not?: String
  facebookUserId_in?: String[] | String
  facebookUserId_not_in?: String[] | String
  facebookUserId_lt?: String
  facebookUserId_lte?: String
  facebookUserId_gt?: String
  facebookUserId_gte?: String
  facebookUserId_contains?: String
  facebookUserId_not_contains?: String
  facebookUserId_starts_with?: String
  facebookUserId_not_starts_with?: String
  facebookUserId_ends_with?: String
  facebookUserId_not_ends_with?: String
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  first_name?: String
  first_name_not?: String
  first_name_in?: String[] | String
  first_name_not_in?: String[] | String
  first_name_lt?: String
  first_name_lte?: String
  first_name_gt?: String
  first_name_gte?: String
  first_name_contains?: String
  first_name_not_contains?: String
  first_name_starts_with?: String
  first_name_not_starts_with?: String
  first_name_ends_with?: String
  first_name_not_ends_with?: String
  last_name?: String
  last_name_not?: String
  last_name_in?: String[] | String
  last_name_not_in?: String[] | String
  last_name_lt?: String
  last_name_lte?: String
  last_name_gt?: String
  last_name_gte?: String
  last_name_contains?: String
  last_name_not_contains?: String
  last_name_starts_with?: String
  last_name_not_starts_with?: String
  last_name_ends_with?: String
  last_name_not_ends_with?: String
  birthday?: DateTime
  birthday_not?: DateTime
  birthday_in?: DateTime[] | DateTime
  birthday_not_in?: DateTime[] | DateTime
  birthday_lt?: DateTime
  birthday_lte?: DateTime
  birthday_gt?: DateTime
  birthday_gte?: DateTime
  locale?: String
  locale_not?: String
  locale_in?: String[] | String
  locale_not_in?: String[] | String
  locale_lt?: String
  locale_lte?: String
  locale_gt?: String
  locale_gte?: String
  locale_contains?: String
  locale_not_contains?: String
  locale_starts_with?: String
  locale_not_starts_with?: String
  locale_ends_with?: String
  locale_not_ends_with?: String
  email?: String
  email_not?: String
  email_in?: String[] | String
  email_not_in?: String[] | String
  email_lt?: String
  email_lte?: String
  email_gt?: String
  email_gte?: String
  email_contains?: String
  email_not_contains?: String
  email_starts_with?: String
  email_not_starts_with?: String
  email_ends_with?: String
  email_not_ends_with?: String
  gender?: GENDER
  gender_not?: GENDER
  gender_in?: GENDER[] | GENDER
  gender_not_in?: GENDER[] | GENDER
  bio?: String
  bio_not?: String
  bio_in?: String[] | String
  bio_not_in?: String[] | String
  bio_lt?: String
  bio_lte?: String
  bio_gt?: String
  bio_gte?: String
  bio_contains?: String
  bio_not_contains?: String
  bio_starts_with?: String
  bio_not_starts_with?: String
  bio_ends_with?: String
  bio_not_ends_with?: String
  lastLogin?: DateTime
  lastLogin_not?: DateTime
  lastLogin_in?: DateTime[] | DateTime
  lastLogin_not_in?: DateTime[] | DateTime
  lastLogin_lt?: DateTime
  lastLogin_lte?: DateTime
  lastLogin_gt?: DateTime
  lastLogin_gte?: DateTime
  distanceFilter?: Int
  distanceFilter_not?: Int
  distanceFilter_in?: Int[] | Int
  distanceFilter_not_in?: Int[] | Int
  distanceFilter_lt?: Int
  distanceFilter_lte?: Int
  distanceFilter_gt?: Int
  distanceFilter_gte?: Int
  oneSignalId?: String
  oneSignalId_not?: String
  oneSignalId_in?: String[] | String
  oneSignalId_not_in?: String[] | String
  oneSignalId_lt?: String
  oneSignalId_lte?: String
  oneSignalId_gt?: String
  oneSignalId_gte?: String
  oneSignalId_contains?: String
  oneSignalId_not_contains?: String
  oneSignalId_starts_with?: String
  oneSignalId_not_starts_with?: String
  oneSignalId_ends_with?: String
  oneSignalId_not_ends_with?: String
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  onboarding?: Boolean
  onboarding_not?: Boolean
  hideAge?: Boolean
  hideAge_not?: Boolean
  language?: LANGUAGES
  language_not?: LANGUAGES
  language_in?: LANGUAGES[] | LANGUAGES
  language_not_in?: LANGUAGES[] | LANGUAGES
  education_every?: EducationWhereInput
  education_some?: EducationWhereInput
  education_none?: EducationWhereInput
  work_every?: WorkWhereInput
  work_some?: WorkWhereInput
  work_none?: WorkWhereInput
  photos_every?: PhotoWhereInput
  photos_some?: PhotoWhereInput
  photos_none?: PhotoWhereInput
  location?: LocationWhereInput
  ageFilter?: AgeFilterWhereInput
  notificationSettings?: NotificationSettingsWhereInput
  places_every?: PlaceWhereInput
  places_some?: PlaceWhereInput
  places_none?: PlaceWhereInput
  reported_every?: UserWhereInput
  reported_some?: UserWhereInput
  reported_none?: UserWhereInput
  uninterested_every?: UserWhereInput
  uninterested_some?: UserWhereInput
  uninterested_none?: UserWhereInput
  sentMessages_every?: MessageWhereInput
  sentMessages_some?: MessageWhereInput
  sentMessages_none?: MessageWhereInput
  receivedMessages_every?: MessageWhereInput
  receivedMessages_some?: MessageWhereInput
  receivedMessages_none?: MessageWhereInput
  sentDates_every?: DateWhereInput
  sentDates_some?: DateWhereInput
  sentDates_none?: DateWhereInput
  receivedDates_every?: DateWhereInput
  receivedDates_some?: DateWhereInput
  receivedDates_none?: DateWhereInput
}

export interface UserUpdateInput {
  facebookUserId?: String
  name?: String
  first_name?: String
  last_name?: String
  birthday?: DateTime
  locale?: String
  email?: String
  gender?: GENDER
  bio?: String
  lastLogin?: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserUpdatetargetGendersInput
  education?: EducationUpdateManyInput
  work?: WorkUpdateManyInput
  photos?: PhotoUpdateManyInput
  location?: LocationUpdateOneInput
  ageFilter?: AgeFilterUpdateOneInput
  notificationSettings?: NotificationSettingsUpdateOneWithoutUserInput
  places?: PlaceUpdateManyWithoutUsersInput
  reported?: UserUpdateManyWithoutReportedInput
  uninterested?: UserUpdateManyWithoutUninterestedInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  sentDates?: DateUpdateManyWithoutInviterInput
  receivedDates?: DateUpdateManyWithoutInviteeInput
}

export interface MessageWhereInput {
  AND?: MessageWhereInput[] | MessageWhereInput
  OR?: MessageWhereInput[] | MessageWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  deliveredAt?: DateTime
  deliveredAt_not?: DateTime
  deliveredAt_in?: DateTime[] | DateTime
  deliveredAt_not_in?: DateTime[] | DateTime
  deliveredAt_lt?: DateTime
  deliveredAt_lte?: DateTime
  deliveredAt_gt?: DateTime
  deliveredAt_gte?: DateTime
  readAt?: DateTime
  readAt_not?: DateTime
  readAt_in?: DateTime[] | DateTime
  readAt_not_in?: DateTime[] | DateTime
  readAt_lt?: DateTime
  readAt_lte?: DateTime
  readAt_gt?: DateTime
  readAt_gte?: DateTime
  from?: UserWhereInput
  to?: UserWhereInput
  date?: DateWhereInput
}

export interface UserUpdatetargetGendersInput {
  set?: GENDER[] | GENDER
}

export interface PlaceWhereInput {
  AND?: PlaceWhereInput[] | PlaceWhereInput
  OR?: PlaceWhereInput[] | PlaceWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  priceRating?: Int
  priceRating_not?: Int
  priceRating_in?: Int[] | Int
  priceRating_not_in?: Int[] | Int
  priceRating_lt?: Int
  priceRating_lte?: Int
  priceRating_gt?: Int
  priceRating_gte?: Int
  googlePlacesId?: String
  googlePlacesId_not?: String
  googlePlacesId_in?: String[] | String
  googlePlacesId_not_in?: String[] | String
  googlePlacesId_lt?: String
  googlePlacesId_lte?: String
  googlePlacesId_gt?: String
  googlePlacesId_gte?: String
  googlePlacesId_contains?: String
  googlePlacesId_not_contains?: String
  googlePlacesId_starts_with?: String
  googlePlacesId_not_starts_with?: String
  googlePlacesId_ends_with?: String
  googlePlacesId_not_ends_with?: String
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  weight?: Int
  weight_not?: Int
  weight_in?: Int[] | Int
  weight_not_in?: Int[] | Int
  weight_lt?: Int
  weight_lte?: Int
  weight_gt?: Int
  weight_gte?: Int
  website?: String
  website_not?: String
  website_in?: String[] | String
  website_not_in?: String[] | String
  website_lt?: String
  website_lte?: String
  website_gt?: String
  website_gte?: String
  website_contains?: String
  website_not_contains?: String
  website_starts_with?: String
  website_not_starts_with?: String
  website_ends_with?: String
  website_not_ends_with?: String
  phone?: String
  phone_not?: String
  phone_in?: String[] | String
  phone_not_in?: String[] | String
  phone_lt?: String
  phone_lte?: String
  phone_gt?: String
  phone_gte?: String
  phone_contains?: String
  phone_not_contains?: String
  phone_starts_with?: String
  phone_not_starts_with?: String
  phone_ends_with?: String
  phone_not_ends_with?: String
  address?: String
  address_not?: String
  address_in?: String[] | String
  address_not_in?: String[] | String
  address_lt?: String
  address_lte?: String
  address_gt?: String
  address_gte?: String
  address_contains?: String
  address_not_contains?: String
  address_starts_with?: String
  address_not_starts_with?: String
  address_ends_with?: String
  address_not_ends_with?: String
  fromGoogle?: Boolean
  fromGoogle_not?: Boolean
  state?: String
  state_not?: String
  state_in?: String[] | String
  state_not_in?: String[] | String
  state_lt?: String
  state_lte?: String
  state_gt?: String
  state_gte?: String
  state_contains?: String
  state_not_contains?: String
  state_starts_with?: String
  state_not_starts_with?: String
  state_ends_with?: String
  state_not_ends_with?: String
  lastGoogleUpdate?: DateTime
  lastGoogleUpdate_not?: DateTime
  lastGoogleUpdate_in?: DateTime[] | DateTime
  lastGoogleUpdate_not_in?: DateTime[] | DateTime
  lastGoogleUpdate_lt?: DateTime
  lastGoogleUpdate_lte?: DateTime
  lastGoogleUpdate_gt?: DateTime
  lastGoogleUpdate_gte?: DateTime
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  detailsFetched?: Boolean
  detailsFetched_not?: Boolean
  location?: LocationWhereInput
  users_every?: UserWhereInput
  users_some?: UserWhereInput
  users_none?: UserWhereInput
}

export interface PlaceCreatetypesInput {
  set?: String[] | String
}

export interface UserUpdateWithoutSentMessagesDataInput {
  facebookUserId?: String
  name?: String
  first_name?: String
  last_name?: String
  birthday?: DateTime
  locale?: String
  email?: String
  gender?: GENDER
  bio?: String
  lastLogin?: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserUpdatetargetGendersInput
  education?: EducationUpdateManyInput
  work?: WorkUpdateManyInput
  photos?: PhotoUpdateManyInput
  location?: LocationUpdateOneInput
  ageFilter?: AgeFilterUpdateOneInput
  notificationSettings?: NotificationSettingsUpdateOneWithoutUserInput
  places?: PlaceUpdateManyWithoutUsersInput
  reported?: UserUpdateManyWithoutReportedInput
  uninterested?: UserUpdateManyWithoutUninterestedInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  sentDates?: DateUpdateManyWithoutInviterInput
  receivedDates?: DateUpdateManyWithoutInviteeInput
}

export interface PlaceCreatecuratedFieldsInput {
  set?: String[] | String
}

export interface EducationUpdateManyInput {
  create?: EducationCreateInput[] | EducationCreateInput
}

export interface UserCreateManyWithoutReportedInput {
  create?: UserCreateWithoutReportedInput[] | UserCreateWithoutReportedInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
}

export interface MessageSubscriptionWhereInput {
  AND?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput
  OR?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: MessageWhereInput
}

export interface UserCreateWithoutReportedInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday?: DateTime
  locale: String
  email?: String
  gender: GENDER
  bio?: String
  lastLogin: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserCreatetargetGendersInput
  education?: EducationCreateManyInput
  work?: WorkCreateManyInput
  photos?: PhotoCreateManyInput
  location?: LocationCreateOneInput
  ageFilter?: AgeFilterCreateOneInput
  notificationSettings?: NotificationSettingsCreateOneWithoutUserInput
  places?: PlaceCreateManyWithoutUsersInput
  uninterested?: UserCreateManyWithoutUninterestedInput
  sentMessages?: MessageCreateManyWithoutFromInput
  receivedMessages?: MessageCreateManyWithoutToInput
  sentDates?: DateCreateManyWithoutInviterInput
  receivedDates?: DateCreateManyWithoutInviteeInput
}

export interface PlaceSubscriptionWhereInput {
  AND?: PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput
  OR?: PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PlaceWhereInput
}

export interface UserCreateManyWithoutUninterestedInput {
  create?: UserCreateWithoutUninterestedInput[] | UserCreateWithoutUninterestedInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
}

export interface NotificationSettingsSubscriptionWhereInput {
  AND?: NotificationSettingsSubscriptionWhereInput[] | NotificationSettingsSubscriptionWhereInput
  OR?: NotificationSettingsSubscriptionWhereInput[] | NotificationSettingsSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: NotificationSettingsWhereInput
}

export interface UserCreateWithoutUninterestedInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday?: DateTime
  locale: String
  email?: String
  gender: GENDER
  bio?: String
  lastLogin: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserCreatetargetGendersInput
  education?: EducationCreateManyInput
  work?: WorkCreateManyInput
  photos?: PhotoCreateManyInput
  location?: LocationCreateOneInput
  ageFilter?: AgeFilterCreateOneInput
  notificationSettings?: NotificationSettingsCreateOneWithoutUserInput
  places?: PlaceCreateManyWithoutUsersInput
  reported?: UserCreateManyWithoutReportedInput
  sentMessages?: MessageCreateManyWithoutFromInput
  receivedMessages?: MessageCreateManyWithoutToInput
  sentDates?: DateCreateManyWithoutInviterInput
  receivedDates?: DateCreateManyWithoutInviteeInput
}

export interface LocationSubscriptionWhereInput {
  AND?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  OR?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: LocationWhereInput
}

export interface MessageCreateManyWithoutFromInput {
  create?: MessageCreateWithoutFromInput[] | MessageCreateWithoutFromInput
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
}

export interface PhotoWhereInput {
  AND?: PhotoWhereInput[] | PhotoWhereInput
  OR?: PhotoWhereInput[] | PhotoWhereInput
  url?: String
  url_not?: String
  url_in?: String[] | String
  url_not_in?: String[] | String
  url_lt?: String
  url_lte?: String
  url_gt?: String
  url_gte?: String
  url_contains?: String
  url_not_contains?: String
  url_starts_with?: String
  url_not_starts_with?: String
  url_ends_with?: String
  url_not_ends_with?: String
}

export interface MessageCreateWithoutFromInput {
  deliveredAt: DateTime
  readAt: DateTime
  to: UserCreateOneWithoutReceivedMessagesInput
  date?: DateCreateOneInput
}

export interface WorkWhereInput {
  AND?: WorkWhereInput[] | WorkWhereInput
  OR?: WorkWhereInput[] | WorkWhereInput
  employer?: String
  employer_not?: String
  employer_in?: String[] | String
  employer_not_in?: String[] | String
  employer_lt?: String
  employer_lte?: String
  employer_gt?: String
  employer_gte?: String
  employer_contains?: String
  employer_not_contains?: String
  employer_starts_with?: String
  employer_not_starts_with?: String
  employer_ends_with?: String
  employer_not_ends_with?: String
  location?: String
  location_not?: String
  location_in?: String[] | String
  location_not_in?: String[] | String
  location_lt?: String
  location_lte?: String
  location_gt?: String
  location_gte?: String
  location_contains?: String
  location_not_contains?: String
  location_starts_with?: String
  location_not_starts_with?: String
  location_ends_with?: String
  location_not_ends_with?: String
  position?: String
  position_not?: String
  position_in?: String[] | String
  position_not_in?: String[] | String
  position_lt?: String
  position_lte?: String
  position_gt?: String
  position_gte?: String
  position_contains?: String
  position_not_contains?: String
  position_starts_with?: String
  position_not_starts_with?: String
  position_ends_with?: String
  position_not_ends_with?: String
}

export interface UserCreateOneWithoutReceivedMessagesInput {
  create?: UserCreateWithoutReceivedMessagesInput
  connect?: UserWhereUniqueInput
}

export interface UserSubscriptionWhereInput {
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: UserWhereInput
}

export interface UserCreateWithoutReceivedMessagesInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday?: DateTime
  locale: String
  email?: String
  gender: GENDER
  bio?: String
  lastLogin: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserCreatetargetGendersInput
  education?: EducationCreateManyInput
  work?: WorkCreateManyInput
  photos?: PhotoCreateManyInput
  location?: LocationCreateOneInput
  ageFilter?: AgeFilterCreateOneInput
  notificationSettings?: NotificationSettingsCreateOneWithoutUserInput
  places?: PlaceCreateManyWithoutUsersInput
  reported?: UserCreateManyWithoutReportedInput
  uninterested?: UserCreateManyWithoutUninterestedInput
  sentMessages?: MessageCreateManyWithoutFromInput
  sentDates?: DateCreateManyWithoutInviterInput
  receivedDates?: DateCreateManyWithoutInviteeInput
}

export interface AgeFilterUpdateInput {
  min?: Int
  max?: Int
}

export interface DateCreateManyWithoutInviterInput {
  create?: DateCreateWithoutInviterInput[] | DateCreateWithoutInviterInput
  connect?: DateWhereUniqueInput[] | DateWhereUniqueInput
}

export interface WorkUpdateInput {
  employer?: String
  location?: String
  position?: String
}

export interface DateCreateWithoutInviterInput {
  status?: DATE_STATUS
  isPaying?: Boolean
  seen?: Boolean
  isCommonPlace?: Boolean
  requestingChat?: Boolean
  inviterReadMessage?: Boolean
  inviteeReadMessage?: Boolean
  invitee: UserCreateOneWithoutReceivedDatesInput
  place?: PlaceCreateOneInput
}

export interface LocationWhereUniqueInput {
  id?: ID_Input
}

export interface UserCreateOneWithoutReceivedDatesInput {
  create?: UserCreateWithoutReceivedDatesInput
  connect?: UserWhereUniqueInput
}

export interface PlaceWhereUniqueInput {
  id?: ID_Input
}

export interface UserCreateWithoutReceivedDatesInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday?: DateTime
  locale: String
  email?: String
  gender: GENDER
  bio?: String
  lastLogin: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserCreatetargetGendersInput
  education?: EducationCreateManyInput
  work?: WorkCreateManyInput
  photos?: PhotoCreateManyInput
  location?: LocationCreateOneInput
  ageFilter?: AgeFilterCreateOneInput
  notificationSettings?: NotificationSettingsCreateOneWithoutUserInput
  places?: PlaceCreateManyWithoutUsersInput
  reported?: UserCreateManyWithoutReportedInput
  uninterested?: UserCreateManyWithoutUninterestedInput
  sentMessages?: MessageCreateManyWithoutFromInput
  receivedMessages?: MessageCreateManyWithoutToInput
  sentDates?: DateCreateManyWithoutInviterInput
}

export interface MessageWhereUniqueInput {
  id?: ID_Input
}

export interface MessageCreateManyWithoutToInput {
  create?: MessageCreateWithoutToInput[] | MessageCreateWithoutToInput
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
}

export interface MessageUpdateInput {
  deliveredAt?: DateTime
  readAt?: DateTime
  from?: UserUpdateOneWithoutSentMessagesInput
  to?: UserUpdateOneWithoutReceivedMessagesInput
  date?: DateUpdateOneInput
}

export interface MessageCreateWithoutToInput {
  deliveredAt: DateTime
  readAt: DateTime
  from: UserCreateOneWithoutSentMessagesInput
  date?: DateCreateOneInput
}

export interface UserUpsertWithoutPlacesInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutPlacesDataInput
  create: UserCreateWithoutPlacesInput
}

export interface UserCreateOneWithoutSentMessagesInput {
  create?: UserCreateWithoutSentMessagesInput
  connect?: UserWhereUniqueInput
}

export interface UserUpdateWithoutPlacesInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutPlacesDataInput
}

export interface UserCreateWithoutSentMessagesInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday?: DateTime
  locale: String
  email?: String
  gender: GENDER
  bio?: String
  lastLogin: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserCreatetargetGendersInput
  education?: EducationCreateManyInput
  work?: WorkCreateManyInput
  photos?: PhotoCreateManyInput
  location?: LocationCreateOneInput
  ageFilter?: AgeFilterCreateOneInput
  notificationSettings?: NotificationSettingsCreateOneWithoutUserInput
  places?: PlaceCreateManyWithoutUsersInput
  reported?: UserCreateManyWithoutReportedInput
  uninterested?: UserCreateManyWithoutUninterestedInput
  receivedMessages?: MessageCreateManyWithoutToInput
  sentDates?: DateCreateManyWithoutInviterInput
  receivedDates?: DateCreateManyWithoutInviteeInput
}

export interface PlaceUpdateInput {
  name?: String
  priceRating?: Int
  googlePlacesId?: String
  weight?: Int
  website?: String
  phone?: String
  address?: String
  fromGoogle?: Boolean
  state?: String
  lastGoogleUpdate?: DateTime
  description?: String
  detailsFetched?: Boolean
  openingHours?: PlaceUpdateopeningHoursInput
  types?: PlaceUpdatetypesInput
  curatedFields?: PlaceUpdatecuratedFieldsInput
  location?: LocationUpdateOneInput
  users?: UserUpdateManyWithoutPlacesInput
}

export interface DateCreateManyWithoutInviteeInput {
  create?: DateCreateWithoutInviteeInput[] | DateCreateWithoutInviteeInput
  connect?: DateWhereUniqueInput[] | DateWhereUniqueInput
}

export interface UserUpdateWithoutNotificationSettingsDataInput {
  facebookUserId?: String
  name?: String
  first_name?: String
  last_name?: String
  birthday?: DateTime
  locale?: String
  email?: String
  gender?: GENDER
  bio?: String
  lastLogin?: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserUpdatetargetGendersInput
  education?: EducationUpdateManyInput
  work?: WorkUpdateManyInput
  photos?: PhotoUpdateManyInput
  location?: LocationUpdateOneInput
  ageFilter?: AgeFilterUpdateOneInput
  places?: PlaceUpdateManyWithoutUsersInput
  reported?: UserUpdateManyWithoutReportedInput
  uninterested?: UserUpdateManyWithoutUninterestedInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  sentDates?: DateUpdateManyWithoutInviterInput
  receivedDates?: DateUpdateManyWithoutInviteeInput
}

export interface DateCreateWithoutInviteeInput {
  status?: DATE_STATUS
  isPaying?: Boolean
  seen?: Boolean
  isCommonPlace?: Boolean
  requestingChat?: Boolean
  inviterReadMessage?: Boolean
  inviteeReadMessage?: Boolean
  inviter: UserCreateOneWithoutSentDatesInput
  place?: PlaceCreateOneInput
}

export interface UserUpdateOneWithoutNotificationSettingsInput {
  create?: UserCreateWithoutNotificationSettingsInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutNotificationSettingsInput
  upsert?: UserUpsertWithoutNotificationSettingsInput
}

export interface UserCreateOneWithoutSentDatesInput {
  create?: UserCreateWithoutSentDatesInput
  connect?: UserWhereUniqueInput
}

export interface LocationUpdateInput {
  lat?: Float
  lng?: Float
  city?: String
  country?: String
}

export interface UserCreateWithoutSentDatesInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday?: DateTime
  locale: String
  email?: String
  gender: GENDER
  bio?: String
  lastLogin: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserCreatetargetGendersInput
  education?: EducationCreateManyInput
  work?: WorkCreateManyInput
  photos?: PhotoCreateManyInput
  location?: LocationCreateOneInput
  ageFilter?: AgeFilterCreateOneInput
  notificationSettings?: NotificationSettingsCreateOneWithoutUserInput
  places?: PlaceCreateManyWithoutUsersInput
  reported?: UserCreateManyWithoutReportedInput
  uninterested?: UserCreateManyWithoutUninterestedInput
  sentMessages?: MessageCreateManyWithoutFromInput
  receivedMessages?: MessageCreateManyWithoutToInput
  receivedDates?: DateCreateManyWithoutInviteeInput
}

export interface UserUpsertWithoutUninterestedInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutUninterestedDataInput
  create: UserCreateWithoutUninterestedInput
}

export interface PlaceCreateOneInput {
  create?: PlaceCreateInput
  connect?: PlaceWhereUniqueInput
}

export interface UserUpsertWithoutReceivedMessagesInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutReceivedMessagesDataInput
  create: UserCreateWithoutReceivedMessagesInput
}

export interface PlaceCreateInput {
  name: String
  priceRating?: Int
  googlePlacesId: String
  weight: Int
  website?: String
  phone?: String
  address?: String
  fromGoogle?: Boolean
  state?: String
  lastGoogleUpdate?: DateTime
  description?: String
  detailsFetched?: Boolean
  openingHours?: PlaceCreateopeningHoursInput
  types?: PlaceCreatetypesInput
  curatedFields?: PlaceCreatecuratedFieldsInput
  location: LocationCreateOneInput
  users?: UserCreateManyWithoutPlacesInput
}

export interface UserUpsertWithoutReceivedDatesInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutReceivedDatesDataInput
  create: UserCreateWithoutReceivedDatesInput
}

export interface DateUpdateManyWithoutInviteeInput {
  create?: DateCreateWithoutInviteeInput[] | DateCreateWithoutInviteeInput
  connect?: DateWhereUniqueInput[] | DateWhereUniqueInput
  disconnect?: DateWhereUniqueInput[] | DateWhereUniqueInput
  delete?: DateWhereUniqueInput[] | DateWhereUniqueInput
  update?: DateUpdateWithoutInviteeInput[] | DateUpdateWithoutInviteeInput
  upsert?: DateUpsertWithoutInviteeInput[] | DateUpsertWithoutInviteeInput
}

export interface DateUpdateOneInput {
  create?: DateCreateInput
  connect?: DateWhereUniqueInput
  disconnect?: DateWhereUniqueInput
  delete?: DateWhereUniqueInput
}

export interface UserCreateWithoutPlacesInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday?: DateTime
  locale: String
  email?: String
  gender: GENDER
  bio?: String
  lastLogin: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserCreatetargetGendersInput
  education?: EducationCreateManyInput
  work?: WorkCreateManyInput
  photos?: PhotoCreateManyInput
  location?: LocationCreateOneInput
  ageFilter?: AgeFilterCreateOneInput
  notificationSettings?: NotificationSettingsCreateOneWithoutUserInput
  reported?: UserCreateManyWithoutReportedInput
  uninterested?: UserCreateManyWithoutUninterestedInput
  sentMessages?: MessageCreateManyWithoutFromInput
  receivedMessages?: MessageCreateManyWithoutToInput
  sentDates?: DateCreateManyWithoutInviterInput
  receivedDates?: DateCreateManyWithoutInviteeInput
}

export interface DateUpsertWithoutInviteeInput {
  where: DateWhereUniqueInput
  update: DateUpdateWithoutInviteeDataInput
  create: DateCreateWithoutInviteeInput
}

export interface DateCreateOneInput {
  create?: DateCreateInput
  connect?: DateWhereUniqueInput
}

export interface UserUpsertWithoutSentDatesInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutSentDatesDataInput
  create: UserCreateWithoutSentDatesInput
}

export interface DateCreateInput {
  status?: DATE_STATUS
  isPaying?: Boolean
  seen?: Boolean
  isCommonPlace?: Boolean
  requestingChat?: Boolean
  inviterReadMessage?: Boolean
  inviteeReadMessage?: Boolean
  inviter: UserCreateOneWithoutSentDatesInput
  invitee: UserCreateOneWithoutReceivedDatesInput
  place?: PlaceCreateOneInput
}

export interface UserUpdateWithoutSentDatesInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutSentDatesDataInput
}

export interface NotificationSettingsCreateInput {
  onInvite?: Boolean
  onMessage?: Boolean
  onGeneral?: Boolean
  onWink?: Boolean
  onWinkConfirmation?: Boolean
  user: UserCreateOneWithoutNotificationSettingsInput
}

export interface DateUpdateWithoutInviteeDataInput {
  status?: DATE_STATUS
  isPaying?: Boolean
  seen?: Boolean
  isCommonPlace?: Boolean
  requestingChat?: Boolean
  inviterReadMessage?: Boolean
  inviteeReadMessage?: Boolean
  inviter?: UserUpdateOneWithoutSentDatesInput
  place?: PlaceUpdateOneInput
}

export interface UserCreateOneWithoutNotificationSettingsInput {
  create?: UserCreateWithoutNotificationSettingsInput
  connect?: UserWhereUniqueInput
}

export interface UserCreateInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday?: DateTime
  locale: String
  email?: String
  gender: GENDER
  bio?: String
  lastLogin: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserCreatetargetGendersInput
  education?: EducationCreateManyInput
  work?: WorkCreateManyInput
  photos?: PhotoCreateManyInput
  location?: LocationCreateOneInput
  ageFilter?: AgeFilterCreateOneInput
  notificationSettings?: NotificationSettingsCreateOneWithoutUserInput
  places?: PlaceCreateManyWithoutUsersInput
  reported?: UserCreateManyWithoutReportedInput
  uninterested?: UserCreateManyWithoutUninterestedInput
  sentMessages?: MessageCreateManyWithoutFromInput
  receivedMessages?: MessageCreateManyWithoutToInput
  sentDates?: DateCreateManyWithoutInviterInput
  receivedDates?: DateCreateManyWithoutInviteeInput
}

export interface UserCreateWithoutNotificationSettingsInput {
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday?: DateTime
  locale: String
  email?: String
  gender: GENDER
  bio?: String
  lastLogin: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserCreatetargetGendersInput
  education?: EducationCreateManyInput
  work?: WorkCreateManyInput
  photos?: PhotoCreateManyInput
  location?: LocationCreateOneInput
  ageFilter?: AgeFilterCreateOneInput
  places?: PlaceCreateManyWithoutUsersInput
  reported?: UserCreateManyWithoutReportedInput
  uninterested?: UserCreateManyWithoutUninterestedInput
  sentMessages?: MessageCreateManyWithoutFromInput
  receivedMessages?: MessageCreateManyWithoutToInput
  sentDates?: DateCreateManyWithoutInviterInput
  receivedDates?: DateCreateManyWithoutInviteeInput
}

export interface EducationCreateManyInput {
  create?: EducationCreateInput[] | EducationCreateInput
}

export interface MessageCreateInput {
  deliveredAt: DateTime
  readAt: DateTime
  from: UserCreateOneWithoutSentMessagesInput
  to: UserCreateOneWithoutReceivedMessagesInput
  date?: DateCreateOneInput
}

export interface WorkCreateManyInput {
  create?: WorkCreateInput[] | WorkCreateInput
}

export interface DateWhereInput {
  AND?: DateWhereInput[] | DateWhereInput
  OR?: DateWhereInput[] | DateWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  status?: DATE_STATUS
  status_not?: DATE_STATUS
  status_in?: DATE_STATUS[] | DATE_STATUS
  status_not_in?: DATE_STATUS[] | DATE_STATUS
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  isPaying?: Boolean
  isPaying_not?: Boolean
  seen?: Boolean
  seen_not?: Boolean
  isCommonPlace?: Boolean
  isCommonPlace_not?: Boolean
  requestingChat?: Boolean
  requestingChat_not?: Boolean
  inviterReadMessage?: Boolean
  inviterReadMessage_not?: Boolean
  inviteeReadMessage?: Boolean
  inviteeReadMessage_not?: Boolean
  inviter?: UserWhereInput
  invitee?: UserWhereInput
  place?: PlaceWhereInput
}

export interface PhotoCreateManyInput {
  create?: PhotoCreateInput[] | PhotoCreateInput
}

export interface NotificationSettingsWhereInput {
  AND?: NotificationSettingsWhereInput[] | NotificationSettingsWhereInput
  OR?: NotificationSettingsWhereInput[] | NotificationSettingsWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  onInvite?: Boolean
  onInvite_not?: Boolean
  onMessage?: Boolean
  onMessage_not?: Boolean
  onGeneral?: Boolean
  onGeneral_not?: Boolean
  onWink?: Boolean
  onWink_not?: Boolean
  onWinkConfirmation?: Boolean
  onWinkConfirmation_not?: Boolean
  user?: UserWhereInput
}

export interface LocationCreateOneInput {
  create?: LocationCreateInput
  connect?: LocationWhereUniqueInput
}

export interface AgeFilterCreateOneInput {
  create?: AgeFilterCreateInput
}

export interface NotificationSettingsCreateOneWithoutUserInput {
  create?: NotificationSettingsCreateWithoutUserInput
  connect?: NotificationSettingsWhereUniqueInput
}

export interface WorkUpdateManyInput {
  create?: WorkCreateInput[] | WorkCreateInput
}

export interface PlaceCreateManyWithoutUsersInput {
  create?: PlaceCreateWithoutUsersInput[] | PlaceCreateWithoutUsersInput
  connect?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput
}

export interface PhotoUpdateManyInput {
  create?: PhotoCreateInput[] | PhotoCreateInput
}

export interface PlaceCreateopeningHoursInput {
  set?: String[] | String
}

export interface LocationUpdateOneInput {
  create?: LocationCreateInput
  connect?: LocationWhereUniqueInput
  disconnect?: LocationWhereUniqueInput
  delete?: LocationWhereUniqueInput
}

export interface DateSubscriptionWhereInput {
  AND?: DateSubscriptionWhereInput[] | DateSubscriptionWhereInput
  OR?: DateSubscriptionWhereInput[] | DateSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: DateWhereInput
}

export interface AgeFilterUpdateOneInput {
  create?: AgeFilterCreateInput
}

export interface AgeFilterSubscriptionWhereInput {
  AND?: AgeFilterSubscriptionWhereInput[] | AgeFilterSubscriptionWhereInput
  OR?: AgeFilterSubscriptionWhereInput[] | AgeFilterSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: AgeFilterWhereInput
}

export interface NotificationSettingsUpdateOneWithoutUserInput {
  create?: NotificationSettingsCreateWithoutUserInput
  connect?: NotificationSettingsWhereUniqueInput
  disconnect?: NotificationSettingsWhereUniqueInput
  delete?: NotificationSettingsWhereUniqueInput
  update?: NotificationSettingsUpdateWithoutUserInput
  upsert?: NotificationSettingsUpsertWithoutUserInput
}

export interface WorkSubscriptionWhereInput {
  AND?: WorkSubscriptionWhereInput[] | WorkSubscriptionWhereInput
  OR?: WorkSubscriptionWhereInput[] | WorkSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WorkWhereInput
}

export interface NotificationSettingsUpdateWithoutUserInput {
  where: NotificationSettingsWhereUniqueInput
  data: NotificationSettingsUpdateWithoutUserDataInput
}

export interface EducationWhereInput {
  AND?: EducationWhereInput[] | EducationWhereInput
  OR?: EducationWhereInput[] | EducationWhereInput
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  type?: String
  type_not?: String
  type_in?: String[] | String
  type_not_in?: String[] | String
  type_lt?: String
  type_lte?: String
  type_gt?: String
  type_gte?: String
  type_contains?: String
  type_not_contains?: String
  type_starts_with?: String
  type_not_starts_with?: String
  type_ends_with?: String
  type_not_ends_with?: String
}

export interface NotificationSettingsUpdateWithoutUserDataInput {
  onInvite?: Boolean
  onMessage?: Boolean
  onGeneral?: Boolean
  onWink?: Boolean
  onWinkConfirmation?: Boolean
}

export interface UserWhereUniqueInput {
  id?: ID_Input
  facebookUserId?: String
}

export interface NotificationSettingsUpsertWithoutUserInput {
  where: NotificationSettingsWhereUniqueInput
  update: NotificationSettingsUpdateWithoutUserDataInput
  create: NotificationSettingsCreateWithoutUserInput
}

export interface DateWhereUniqueInput {
  id?: ID_Input
}

export interface PlaceUpdateManyWithoutUsersInput {
  create?: PlaceCreateWithoutUsersInput[] | PlaceCreateWithoutUsersInput
  connect?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput
  disconnect?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput
  delete?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput
  update?: PlaceUpdateWithoutUsersInput[] | PlaceUpdateWithoutUsersInput
  upsert?: PlaceUpsertWithoutUsersInput[] | PlaceUpsertWithoutUsersInput
}

export interface DateUpdateInput {
  status?: DATE_STATUS
  isPaying?: Boolean
  seen?: Boolean
  isCommonPlace?: Boolean
  requestingChat?: Boolean
  inviterReadMessage?: Boolean
  inviteeReadMessage?: Boolean
  inviter?: UserUpdateOneWithoutSentDatesInput
  invitee?: UserUpdateOneWithoutReceivedDatesInput
  place?: PlaceUpdateOneInput
}

export interface PlaceUpdateWithoutUsersInput {
  where: PlaceWhereUniqueInput
  data: PlaceUpdateWithoutUsersDataInput
}

export interface UserUpdateManyWithoutPlacesInput {
  create?: UserCreateWithoutPlacesInput[] | UserCreateWithoutPlacesInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput
  update?: UserUpdateWithoutPlacesInput[] | UserUpdateWithoutPlacesInput
  upsert?: UserUpsertWithoutPlacesInput[] | UserUpsertWithoutPlacesInput
}

export interface PlaceUpdateWithoutUsersDataInput {
  name?: String
  priceRating?: Int
  googlePlacesId?: String
  weight?: Int
  website?: String
  phone?: String
  address?: String
  fromGoogle?: Boolean
  state?: String
  lastGoogleUpdate?: DateTime
  description?: String
  detailsFetched?: Boolean
  openingHours?: PlaceUpdateopeningHoursInput
  types?: PlaceUpdatetypesInput
  curatedFields?: PlaceUpdatecuratedFieldsInput
  location?: LocationUpdateOneInput
}

export interface UserUpdateWithoutNotificationSettingsInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutNotificationSettingsDataInput
}

export interface PlaceUpdateopeningHoursInput {
  set?: String[] | String
}

export interface UserUpsertWithoutReportedInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutReportedDataInput
  create: UserCreateWithoutReportedInput
}

export interface PlaceUpdatetypesInput {
  set?: String[] | String
}

export interface DateUpsertWithoutInviterInput {
  where: DateWhereUniqueInput
  update: DateUpdateWithoutInviterDataInput
  create: DateCreateWithoutInviterInput
}

export interface PlaceUpdatecuratedFieldsInput {
  set?: String[] | String
}

export interface UserUpsertWithoutSentMessagesInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutSentMessagesDataInput
  create: UserCreateWithoutSentMessagesInput
}

export interface PlaceUpsertWithoutUsersInput {
  where: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutUsersDataInput
  create: PlaceCreateWithoutUsersInput
}

export interface UserUpdateWithoutSentDatesDataInput {
  facebookUserId?: String
  name?: String
  first_name?: String
  last_name?: String
  birthday?: DateTime
  locale?: String
  email?: String
  gender?: GENDER
  bio?: String
  lastLogin?: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserUpdatetargetGendersInput
  education?: EducationUpdateManyInput
  work?: WorkUpdateManyInput
  photos?: PhotoUpdateManyInput
  location?: LocationUpdateOneInput
  ageFilter?: AgeFilterUpdateOneInput
  notificationSettings?: NotificationSettingsUpdateOneWithoutUserInput
  places?: PlaceUpdateManyWithoutUsersInput
  reported?: UserUpdateManyWithoutReportedInput
  uninterested?: UserUpdateManyWithoutUninterestedInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  receivedDates?: DateUpdateManyWithoutInviteeInput
}

export interface UserUpdateManyWithoutReportedInput {
  create?: UserCreateWithoutReportedInput[] | UserCreateWithoutReportedInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput
  update?: UserUpdateWithoutReportedInput[] | UserUpdateWithoutReportedInput
  upsert?: UserUpsertWithoutReportedInput[] | UserUpsertWithoutReportedInput
}

export interface DateUpdateWithoutInviteeInput {
  where: DateWhereUniqueInput
  data: DateUpdateWithoutInviteeDataInput
}

export interface UserUpdateWithoutReportedInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutReportedDataInput
}

export interface EducationCreateInput {
  name: String
  type: String
}

export interface UserUpdateWithoutReportedDataInput {
  facebookUserId?: String
  name?: String
  first_name?: String
  last_name?: String
  birthday?: DateTime
  locale?: String
  email?: String
  gender?: GENDER
  bio?: String
  lastLogin?: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserUpdatetargetGendersInput
  education?: EducationUpdateManyInput
  work?: WorkUpdateManyInput
  photos?: PhotoUpdateManyInput
  location?: LocationUpdateOneInput
  ageFilter?: AgeFilterUpdateOneInput
  notificationSettings?: NotificationSettingsUpdateOneWithoutUserInput
  places?: PlaceUpdateManyWithoutUsersInput
  uninterested?: UserUpdateManyWithoutUninterestedInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  sentDates?: DateUpdateManyWithoutInviterInput
  receivedDates?: DateUpdateManyWithoutInviteeInput
}

export interface PhotoCreateInput {
  url: String
}

export interface UserUpdateManyWithoutUninterestedInput {
  create?: UserCreateWithoutUninterestedInput[] | UserCreateWithoutUninterestedInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput
  update?: UserUpdateWithoutUninterestedInput[] | UserUpdateWithoutUninterestedInput
  upsert?: UserUpsertWithoutUninterestedInput[] | UserUpsertWithoutUninterestedInput
}

export interface AgeFilterCreateInput {
  min: Int
  max: Int
}

export interface UserUpdateWithoutUninterestedInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutUninterestedDataInput
}

export interface PlaceCreateWithoutUsersInput {
  name: String
  priceRating?: Int
  googlePlacesId: String
  weight: Int
  website?: String
  phone?: String
  address?: String
  fromGoogle?: Boolean
  state?: String
  lastGoogleUpdate?: DateTime
  description?: String
  detailsFetched?: Boolean
  openingHours?: PlaceCreateopeningHoursInput
  types?: PlaceCreatetypesInput
  curatedFields?: PlaceCreatecuratedFieldsInput
  location: LocationCreateOneInput
}

export interface UserUpdateWithoutUninterestedDataInput {
  facebookUserId?: String
  name?: String
  first_name?: String
  last_name?: String
  birthday?: DateTime
  locale?: String
  email?: String
  gender?: GENDER
  bio?: String
  lastLogin?: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserUpdatetargetGendersInput
  education?: EducationUpdateManyInput
  work?: WorkUpdateManyInput
  photos?: PhotoUpdateManyInput
  location?: LocationUpdateOneInput
  ageFilter?: AgeFilterUpdateOneInput
  notificationSettings?: NotificationSettingsUpdateOneWithoutUserInput
  places?: PlaceUpdateManyWithoutUsersInput
  reported?: UserUpdateManyWithoutReportedInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  sentDates?: DateUpdateManyWithoutInviterInput
  receivedDates?: DateUpdateManyWithoutInviteeInput
}

export interface LocationWhereInput {
  AND?: LocationWhereInput[] | LocationWhereInput
  OR?: LocationWhereInput[] | LocationWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  lat?: Float
  lat_not?: Float
  lat_in?: Float[] | Float
  lat_not_in?: Float[] | Float
  lat_lt?: Float
  lat_lte?: Float
  lat_gt?: Float
  lat_gte?: Float
  lng?: Float
  lng_not?: Float
  lng_in?: Float[] | Float
  lng_not_in?: Float[] | Float
  lng_lt?: Float
  lng_lte?: Float
  lng_gt?: Float
  lng_gte?: Float
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  city?: String
  city_not?: String
  city_in?: String[] | String
  city_not_in?: String[] | String
  city_lt?: String
  city_lte?: String
  city_gt?: String
  city_gte?: String
  city_contains?: String
  city_not_contains?: String
  city_starts_with?: String
  city_not_starts_with?: String
  city_ends_with?: String
  city_not_ends_with?: String
  country?: String
  country_not?: String
  country_in?: String[] | String
  country_not_in?: String[] | String
  country_lt?: String
  country_lte?: String
  country_gt?: String
  country_gte?: String
  country_contains?: String
  country_not_contains?: String
  country_starts_with?: String
  country_not_starts_with?: String
  country_ends_with?: String
  country_not_ends_with?: String
}

export interface MessageUpdateManyWithoutFromInput {
  create?: MessageCreateWithoutFromInput[] | MessageCreateWithoutFromInput
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
  update?: MessageUpdateWithoutFromInput[] | MessageUpdateWithoutFromInput
  upsert?: MessageUpsertWithoutFromInput[] | MessageUpsertWithoutFromInput
}

export interface EducationSubscriptionWhereInput {
  AND?: EducationSubscriptionWhereInput[] | EducationSubscriptionWhereInput
  OR?: EducationSubscriptionWhereInput[] | EducationSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: EducationWhereInput
}

export interface MessageUpdateWithoutFromInput {
  where: MessageWhereUniqueInput
  data: MessageUpdateWithoutFromDataInput
}

export interface NotificationSettingsWhereUniqueInput {
  id?: ID_Input
}

export interface MessageUpdateWithoutFromDataInput {
  deliveredAt?: DateTime
  readAt?: DateTime
  to?: UserUpdateOneWithoutReceivedMessagesInput
  date?: DateUpdateOneInput
}

export interface UserUpdateWithoutPlacesDataInput {
  facebookUserId?: String
  name?: String
  first_name?: String
  last_name?: String
  birthday?: DateTime
  locale?: String
  email?: String
  gender?: GENDER
  bio?: String
  lastLogin?: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserUpdatetargetGendersInput
  education?: EducationUpdateManyInput
  work?: WorkUpdateManyInput
  photos?: PhotoUpdateManyInput
  location?: LocationUpdateOneInput
  ageFilter?: AgeFilterUpdateOneInput
  notificationSettings?: NotificationSettingsUpdateOneWithoutUserInput
  reported?: UserUpdateManyWithoutReportedInput
  uninterested?: UserUpdateManyWithoutUninterestedInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  sentDates?: DateUpdateManyWithoutInviterInput
  receivedDates?: DateUpdateManyWithoutInviteeInput
}

export interface UserUpdateOneWithoutReceivedMessagesInput {
  create?: UserCreateWithoutReceivedMessagesInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutReceivedMessagesInput
  upsert?: UserUpsertWithoutReceivedMessagesInput
}

export interface NotificationSettingsUpdateInput {
  onInvite?: Boolean
  onMessage?: Boolean
  onGeneral?: Boolean
  onWink?: Boolean
  onWinkConfirmation?: Boolean
  user?: UserUpdateOneWithoutNotificationSettingsInput
}

export interface UserUpdateWithoutReceivedMessagesInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutReceivedMessagesDataInput
}

export interface MessageUpsertWithoutToInput {
  where: MessageWhereUniqueInput
  update: MessageUpdateWithoutToDataInput
  create: MessageCreateWithoutToInput
}

export interface UserUpdateWithoutReceivedMessagesDataInput {
  facebookUserId?: String
  name?: String
  first_name?: String
  last_name?: String
  birthday?: DateTime
  locale?: String
  email?: String
  gender?: GENDER
  bio?: String
  lastLogin?: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserUpdatetargetGendersInput
  education?: EducationUpdateManyInput
  work?: WorkUpdateManyInput
  photos?: PhotoUpdateManyInput
  location?: LocationUpdateOneInput
  ageFilter?: AgeFilterUpdateOneInput
  notificationSettings?: NotificationSettingsUpdateOneWithoutUserInput
  places?: PlaceUpdateManyWithoutUsersInput
  reported?: UserUpdateManyWithoutReportedInput
  uninterested?: UserUpdateManyWithoutUninterestedInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  sentDates?: DateUpdateManyWithoutInviterInput
  receivedDates?: DateUpdateManyWithoutInviteeInput
}

export interface UserUpdateOneWithoutSentDatesInput {
  create?: UserCreateWithoutSentDatesInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutSentDatesInput
  upsert?: UserUpsertWithoutSentDatesInput
}

export interface DateUpdateManyWithoutInviterInput {
  create?: DateCreateWithoutInviterInput[] | DateCreateWithoutInviterInput
  connect?: DateWhereUniqueInput[] | DateWhereUniqueInput
  disconnect?: DateWhereUniqueInput[] | DateWhereUniqueInput
  delete?: DateWhereUniqueInput[] | DateWhereUniqueInput
  update?: DateUpdateWithoutInviterInput[] | DateUpdateWithoutInviterInput
  upsert?: DateUpsertWithoutInviterInput[] | DateUpsertWithoutInviterInput
}

export interface WorkCreateInput {
  employer: String
  location: String
  position: String
}

export interface DateUpdateWithoutInviterInput {
  where: DateWhereUniqueInput
  data: DateUpdateWithoutInviterDataInput
}

export interface NotificationSettingsCreateWithoutUserInput {
  onInvite?: Boolean
  onMessage?: Boolean
  onGeneral?: Boolean
  onWink?: Boolean
  onWinkConfirmation?: Boolean
}

export interface DateUpdateWithoutInviterDataInput {
  status?: DATE_STATUS
  isPaying?: Boolean
  seen?: Boolean
  isCommonPlace?: Boolean
  requestingChat?: Boolean
  inviterReadMessage?: Boolean
  inviteeReadMessage?: Boolean
  invitee?: UserUpdateOneWithoutReceivedDatesInput
  place?: PlaceUpdateOneInput
}

export interface PhotoSubscriptionWhereInput {
  AND?: PhotoSubscriptionWhereInput[] | PhotoSubscriptionWhereInput
  OR?: PhotoSubscriptionWhereInput[] | PhotoSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PhotoWhereInput
}

export interface UserUpdateOneWithoutReceivedDatesInput {
  create?: UserCreateWithoutReceivedDatesInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutReceivedDatesInput
  upsert?: UserUpsertWithoutReceivedDatesInput
}

export interface EducationUpdateInput {
  name?: String
  type?: String
}

export interface UserUpdateWithoutReceivedDatesInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutReceivedDatesDataInput
}

export interface MessageUpsertWithoutFromInput {
  where: MessageWhereUniqueInput
  update: MessageUpdateWithoutFromDataInput
  create: MessageCreateWithoutFromInput
}

export interface UserUpdateWithoutReceivedDatesDataInput {
  facebookUserId?: String
  name?: String
  first_name?: String
  last_name?: String
  birthday?: DateTime
  locale?: String
  email?: String
  gender?: GENDER
  bio?: String
  lastLogin?: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  onboarding?: Boolean
  hideAge?: Boolean
  language?: LANGUAGES
  targetGenders?: UserUpdatetargetGendersInput
  education?: EducationUpdateManyInput
  work?: WorkUpdateManyInput
  photos?: PhotoUpdateManyInput
  location?: LocationUpdateOneInput
  ageFilter?: AgeFilterUpdateOneInput
  notificationSettings?: NotificationSettingsUpdateOneWithoutUserInput
  places?: PlaceUpdateManyWithoutUsersInput
  reported?: UserUpdateManyWithoutReportedInput
  uninterested?: UserUpdateManyWithoutUninterestedInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  sentDates?: DateUpdateManyWithoutInviterInput
}

export interface UserCreatetargetGendersInput {
  set?: GENDER[] | GENDER
}

export interface MessageUpdateManyWithoutToInput {
  create?: MessageCreateWithoutToInput[] | MessageCreateWithoutToInput
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
  update?: MessageUpdateWithoutToInput[] | MessageUpdateWithoutToInput
  upsert?: MessageUpsertWithoutToInput[] | MessageUpsertWithoutToInput
}

export interface AgeFilterWhereInput {
  AND?: AgeFilterWhereInput[] | AgeFilterWhereInput
  OR?: AgeFilterWhereInput[] | AgeFilterWhereInput
  min?: Int
  min_not?: Int
  min_in?: Int[] | Int
  min_not_in?: Int[] | Int
  min_lt?: Int
  min_lte?: Int
  min_gt?: Int
  min_gte?: Int
  max?: Int
  max_not?: Int
  max_in?: Int[] | Int
  max_not_in?: Int[] | Int
  max_lt?: Int
  max_lte?: Int
  max_gt?: Int
  max_gte?: Int
}

export interface UserUpdateWithoutSentMessagesInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutSentMessagesDataInput
}

export interface UserUpdateOneWithoutSentMessagesInput {
  create?: UserCreateWithoutSentMessagesInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutSentMessagesInput
  upsert?: UserUpsertWithoutSentMessagesInput
}

export interface MessageUpdateWithoutToDataInput {
  deliveredAt?: DateTime
  readAt?: DateTime
  from?: UserUpdateOneWithoutSentMessagesInput
  date?: DateUpdateOneInput
}

export interface MessageUpdateWithoutToInput {
  where: MessageWhereUniqueInput
  data: MessageUpdateWithoutToDataInput
}

export interface PhotoUpdateInput {
  url?: String
}

export interface LocationCreateInput {
  lat: Float
  lng: Float
  city?: String
  country?: String
}

export interface PlaceUpdateOneInput {
  create?: PlaceCreateInput
  connect?: PlaceWhereUniqueInput
  disconnect?: PlaceWhereUniqueInput
  delete?: PlaceWhereUniqueInput
}

export interface UserUpsertWithoutNotificationSettingsInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutNotificationSettingsDataInput
  create: UserCreateWithoutNotificationSettingsInput
}

export interface Node {
  id: ID_Output
}

export interface MessagePreviousValues {
  id: ID_Output
  createdAt: DateTime
  deliveredAt: DateTime
  readAt: DateTime
}

export interface BatchPayload {
  count: Long
}

export interface PlacePreviousValues {
  id: ID_Output
  name: String
  priceRating?: Int
  googlePlacesId: String
  createdAt: DateTime
  weight: Int
  website?: String
  phone?: String
  address?: String
  openingHours?: String[]
  types?: String[]
  fromGoogle?: Boolean
  state?: String
  lastGoogleUpdate?: DateTime
  curatedFields?: String[]
  description?: String
  detailsFetched: Boolean
}

export interface MessageSubscriptionPayload {
  mutation: MutationType
  node?: Message
  updatedFields?: String[]
  previousValues?: MessagePreviousValues
}

export interface User extends Node {
  id: ID_Output
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday?: DateTime
  locale: String
  education?: Education[]
  work?: Work[]
  email?: String
  gender: GENDER
  targetGenders?: GENDER[]
  photos?: Photo[]
  bio?: String
  location?: Location
  lastLogin: DateTime
  distanceFilter?: Int
  ageFilter?: AgeFilter
  oneSignalId?: String
  notificationSettings?: NotificationSettings
  createdAt: DateTime
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
  places?: Place[]
  reported?: User[]
  uninterested?: User[]
  sentMessages?: Message[]
  receivedMessages?: Message[]
  sentDates?: Date[]
  receivedDates?: Date[]
}

export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
  aggregate: AggregateUser
}

export interface MessageConnection {
  pageInfo: PageInfo
  edges: MessageEdge[]
  aggregate: AggregateMessage
}

export interface AggregateMessage {
  count: Int
}

export interface DateEdge {
  node: Date
  cursor: String
}

export interface Education {
  name: String
  type: String
}

export interface AggregatePlace {
  count: Int
}

export interface DatePreviousValues {
  id: ID_Output
  status: DATE_STATUS
  createdAt: DateTime
  isPaying?: Boolean
  seen: Boolean
  isCommonPlace?: Boolean
  requestingChat: Boolean
  inviterReadMessage: Boolean
  inviteeReadMessage: Boolean
}

export interface PlaceConnection {
  pageInfo: PageInfo
  edges: PlaceEdge[]
  aggregate: AggregatePlace
}

export interface Date extends Node {
  id: ID_Output
  inviter: User
  invitee: User
  place?: Place
  status: DATE_STATUS
  createdAt: DateTime
  isPaying?: Boolean
  seen: Boolean
  isCommonPlace?: Boolean
  requestingChat: Boolean
  inviterReadMessage: Boolean
  inviteeReadMessage: Boolean
}

export interface NotificationSettingsEdge {
  node: NotificationSettings
  cursor: String
}

export interface DateSubscriptionPayload {
  mutation: MutationType
  node?: Date
  updatedFields?: String[]
  previousValues?: DatePreviousValues
}

export interface AggregateAgeFilter {
  count: Int
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node?: User
  updatedFields?: String[]
  previousValues?: UserPreviousValues
}

export interface AgeFilterConnection {
  pageInfo: PageInfo
  edges: AgeFilterEdge[]
  aggregate: AggregateAgeFilter
}

export interface UserPreviousValues {
  id: ID_Output
  facebookUserId: String
  name: String
  first_name: String
  last_name: String
  birthday?: DateTime
  locale: String
  email?: String
  gender: GENDER
  targetGenders?: GENDER[]
  bio?: String
  lastLogin: DateTime
  distanceFilter?: Int
  oneSignalId?: String
  createdAt: DateTime
  onboarding: Boolean
  hideAge: Boolean
  language: LANGUAGES
}

export interface LocationEdge {
  node: Location
  cursor: String
}

export interface Message extends Node {
  id: ID_Output
  createdAt: DateTime
  from: User
  to: User
  deliveredAt: DateTime
  readAt: DateTime
  date?: Date
}

export interface AggregatePhoto {
  count: Int
}

export interface EducationSubscriptionPayload {
  mutation: MutationType
  node?: Education
  updatedFields?: String[]
  previousValues?: EducationPreviousValues
}

export interface PhotoConnection {
  pageInfo: PageInfo
  edges: PhotoEdge[]
  aggregate: AggregatePhoto
}

export interface EducationPreviousValues {
  name: String
  type: String
}

export interface WorkEdge {
  node: Work
  cursor: String
}

export interface Place extends Node {
  id: ID_Output
  name: String
  priceRating?: Int
  location: Location
  googlePlacesId: String
  createdAt: DateTime
  weight: Int
  website?: String
  phone?: String
  address?: String
  openingHours?: String[]
  types?: String[]
  fromGoogle?: Boolean
  state?: String
  lastGoogleUpdate?: DateTime
  curatedFields?: String[]
  description?: String
  detailsFetched: Boolean
  users?: User[]
}

export interface AggregateEducation {
  count: Int
}

export interface WorkSubscriptionPayload {
  mutation: MutationType
  node?: Work
  updatedFields?: String[]
  previousValues?: WorkPreviousValues
}

export interface EducationConnection {
  pageInfo: PageInfo
  edges: EducationEdge[]
  aggregate: AggregateEducation
}

export interface WorkPreviousValues {
  employer: String
  location: String
  position: String
}

export interface UserEdge {
  node: User
  cursor: String
}

export interface NotificationSettings extends Node {
  id: ID_Output
  user: User
  createdAt: DateTime
  onInvite: Boolean
  onMessage: Boolean
  onGeneral: Boolean
  onWink: Boolean
  onWinkConfirmation: Boolean
}

export interface MessageEdge {
  node: Message
  cursor: String
}

export interface PhotoSubscriptionPayload {
  mutation: MutationType
  node?: Photo
  updatedFields?: String[]
  previousValues?: PhotoPreviousValues
}

export interface DateConnection {
  pageInfo: PageInfo
  edges: DateEdge[]
  aggregate: AggregateDate
}

export interface PhotoPreviousValues {
  url: String
}

export interface AggregateNotificationSettings {
  count: Int
}

export interface AgeFilter {
  min: Int
  max: Int
}

export interface AgeFilterEdge {
  node: AgeFilter
  cursor: String
}

export interface LocationSubscriptionPayload {
  mutation: MutationType
  node?: Location
  updatedFields?: String[]
  previousValues?: LocationPreviousValues
}

export interface LocationConnection {
  pageInfo: PageInfo
  edges: LocationEdge[]
  aggregate: AggregateLocation
}

export interface LocationPreviousValues {
  id: ID_Output
  lat: Float
  lng: Float
  createdAt: DateTime
  city?: String
  country?: String
}

export interface AggregateWork {
  count: Int
}

export interface Location extends Node {
  id: ID_Output
  lat: Float
  lng: Float
  createdAt: DateTime
  city?: String
  country?: String
}

export interface EducationEdge {
  node: Education
  cursor: String
}

export interface AgeFilterSubscriptionPayload {
  mutation: MutationType
  node?: AgeFilter
  updatedFields?: String[]
  previousValues?: AgeFilterPreviousValues
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface AgeFilterPreviousValues {
  min: Int
  max: Int
}

export interface PlaceEdge {
  node: Place
  cursor: String
}

export interface Photo {
  url: String
}

export interface AggregateLocation {
  count: Int
}

export interface WorkConnection {
  pageInfo: PageInfo
  edges: WorkEdge[]
  aggregate: AggregateWork
}

export interface PlaceSubscriptionPayload {
  mutation: MutationType
  node?: Place
  updatedFields?: String[]
  previousValues?: PlacePreviousValues
}

export interface Work {
  employer: String
  location: String
  position: String
}

export interface NotificationSettingsPreviousValues {
  id: ID_Output
  createdAt: DateTime
  onInvite: Boolean
  onMessage: Boolean
  onGeneral: Boolean
  onWink: Boolean
  onWinkConfirmation: Boolean
}

export interface NotificationSettingsSubscriptionPayload {
  mutation: MutationType
  node?: NotificationSettings
  updatedFields?: String[]
  previousValues?: NotificationSettingsPreviousValues
}

export interface AggregateUser {
  count: Int
}

export interface PhotoEdge {
  node: Photo
  cursor: String
}

export interface NotificationSettingsConnection {
  pageInfo: PageInfo
  edges: NotificationSettingsEdge[]
  aggregate: AggregateNotificationSettings
}

export interface AggregateDate {
  count: Int
}

export type DateTime = string

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

export type Long = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number

export interface Schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

export type Query = {
  users: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<User[]>
  educations: (args: { where?: EducationWhereInput, orderBy?: EducationOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Education[]>
  works: (args: { where?: WorkWhereInput, orderBy?: WorkOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Work[]>
  photos: (args: { where?: PhotoWhereInput, orderBy?: PhotoOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Photo[]>
  locations: (args: { where?: LocationWhereInput, orderBy?: LocationOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Location[]>
  ageFilters: (args: { where?: AgeFilterWhereInput, orderBy?: AgeFilterOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<AgeFilter[]>
  notificationSettingses: (args: { where?: NotificationSettingsWhereInput, orderBy?: NotificationSettingsOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<NotificationSettings[]>
  places: (args: { where?: PlaceWhereInput, orderBy?: PlaceOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Place[]>
  dates: (args: { where?: DateWhereInput, orderBy?: DateOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Date[]>
  messages: (args: { where?: MessageWhereInput, orderBy?: MessageOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Message[]>
  user: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  location: (args: { where: LocationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Location | null>
  notificationSettings: (args: { where: NotificationSettingsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<NotificationSettings | null>
  place: (args: { where: PlaceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Place | null>
  date: (args: { where: DateWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Date | null>
  message: (args: { where: MessageWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Message | null>
  usersConnection: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<UserConnection>
  educationsConnection: (args: { where?: EducationWhereInput, orderBy?: EducationOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<EducationConnection>
  worksConnection: (args: { where?: WorkWhereInput, orderBy?: WorkOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<WorkConnection>
  photosConnection: (args: { where?: PhotoWhereInput, orderBy?: PhotoOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PhotoConnection>
  locationsConnection: (args: { where?: LocationWhereInput, orderBy?: LocationOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<LocationConnection>
  ageFiltersConnection: (args: { where?: AgeFilterWhereInput, orderBy?: AgeFilterOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<AgeFilterConnection>
  notificationSettingsesConnection: (args: { where?: NotificationSettingsWhereInput, orderBy?: NotificationSettingsOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<NotificationSettingsConnection>
  placesConnection: (args: { where?: PlaceWhereInput, orderBy?: PlaceOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PlaceConnection>
  datesConnection: (args: { where?: DateWhereInput, orderBy?: DateOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<DateConnection>
  messagesConnection: (args: { where?: MessageWhereInput, orderBy?: MessageOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<MessageConnection>
  node: (args: { id: ID_Output }, info?: GraphQLResolveInfo | string) => Promise<Node | null>
}

export type Mutation = {
  createUser: (args: { data: UserCreateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  createEducation: (args: { data: EducationCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Education>
  createWork: (args: { data: WorkCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Work>
  createPhoto: (args: { data: PhotoCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Photo>
  createLocation: (args: { data: LocationCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Location>
  createAgeFilter: (args: { data: AgeFilterCreateInput }, info?: GraphQLResolveInfo | string) => Promise<AgeFilter>
  createNotificationSettings: (args: { data: NotificationSettingsCreateInput }, info?: GraphQLResolveInfo | string) => Promise<NotificationSettings>
  createPlace: (args: { data: PlaceCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Place>
  createDate: (args: { data: DateCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Date>
  createMessage: (args: { data: MessageCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Message>
  updateUser: (args: { data: UserUpdateInput, where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  updateLocation: (args: { data: LocationUpdateInput, where: LocationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Location | null>
  updateNotificationSettings: (args: { data: NotificationSettingsUpdateInput, where: NotificationSettingsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<NotificationSettings | null>
  updatePlace: (args: { data: PlaceUpdateInput, where: PlaceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Place | null>
  updateDate: (args: { data: DateUpdateInput, where: DateWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Date | null>
  updateMessage: (args: { data: MessageUpdateInput, where: MessageWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Message | null>
  deleteUser: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  deleteLocation: (args: { where: LocationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Location | null>
  deleteNotificationSettings: (args: { where: NotificationSettingsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<NotificationSettings | null>
  deletePlace: (args: { where: PlaceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Place | null>
  deleteDate: (args: { where: DateWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Date | null>
  deleteMessage: (args: { where: MessageWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Message | null>
  upsertUser: (args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  upsertLocation: (args: { where: LocationWhereUniqueInput, create: LocationCreateInput, update: LocationUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Location>
  upsertNotificationSettings: (args: { where: NotificationSettingsWhereUniqueInput, create: NotificationSettingsCreateInput, update: NotificationSettingsUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<NotificationSettings>
  upsertPlace: (args: { where: PlaceWhereUniqueInput, create: PlaceCreateInput, update: PlaceUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Place>
  upsertDate: (args: { where: DateWhereUniqueInput, create: DateCreateInput, update: DateUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Date>
  upsertMessage: (args: { where: MessageWhereUniqueInput, create: MessageCreateInput, update: MessageUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Message>
  updateManyUsers: (args: { data: UserUpdateInput, where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyEducations: (args: { data: EducationUpdateInput, where: EducationWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyWorks: (args: { data: WorkUpdateInput, where: WorkWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyPhotos: (args: { data: PhotoUpdateInput, where: PhotoWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyLocations: (args: { data: LocationUpdateInput, where: LocationWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyAgeFilters: (args: { data: AgeFilterUpdateInput, where: AgeFilterWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyNotificationSettingses: (args: { data: NotificationSettingsUpdateInput, where: NotificationSettingsWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyPlaces: (args: { data: PlaceUpdateInput, where: PlaceWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyDates: (args: { data: DateUpdateInput, where: DateWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyMessages: (args: { data: MessageUpdateInput, where: MessageWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyUsers: (args: { where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyEducations: (args: { where: EducationWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyWorks: (args: { where: WorkWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPhotos: (args: { where: PhotoWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyLocations: (args: { where: LocationWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyAgeFilters: (args: { where: AgeFilterWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyNotificationSettingses: (args: { where: NotificationSettingsWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPlaces: (args: { where: PlaceWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyDates: (args: { where: DateWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyMessages: (args: { where: MessageWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
}

export type Subscription = {
  user: (args: { where?: UserSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<UserSubscriptionPayload>>
  education: (args: { where?: EducationSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<EducationSubscriptionPayload>>
  work: (args: { where?: WorkSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<WorkSubscriptionPayload>>
  photo: (args: { where?: PhotoSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PhotoSubscriptionPayload>>
  location: (args: { where?: LocationSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<LocationSubscriptionPayload>>
  ageFilter: (args: { where?: AgeFilterSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<AgeFilterSubscriptionPayload>>
  notificationSettings: (args: { where?: NotificationSettingsSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<NotificationSettingsSubscriptionPayload>>
  place: (args: { where?: PlaceSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PlaceSubscriptionPayload>>
  date: (args: { where?: DateSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<DateSubscriptionPayload>>
  message: (args: { where?: MessageSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<MessageSubscriptionPayload>>
}

export class Prisma extends BasePrisma {
  
  constructor({ endpoint, secret, fragmentReplacements, debug }: BasePrismaOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    User: (where: UserWhereInput): Promise<boolean> => super.existsDelegate('query', 'users', { where }, {}, '{ id }'),
    Education: (where: EducationWhereInput): Promise<boolean> => super.existsDelegate('query', 'educations', { where }, {}, '{ id }'),
    Work: (where: WorkWhereInput): Promise<boolean> => super.existsDelegate('query', 'works', { where }, {}, '{ id }'),
    Photo: (where: PhotoWhereInput): Promise<boolean> => super.existsDelegate('query', 'photos', { where }, {}, '{ id }'),
    Location: (where: LocationWhereInput): Promise<boolean> => super.existsDelegate('query', 'locations', { where }, {}, '{ id }'),
    AgeFilter: (where: AgeFilterWhereInput): Promise<boolean> => super.existsDelegate('query', 'ageFilters', { where }, {}, '{ id }'),
    NotificationSettings: (where: NotificationSettingsWhereInput): Promise<boolean> => super.existsDelegate('query', 'notificationSettingses', { where }, {}, '{ id }'),
    Place: (where: PlaceWhereInput): Promise<boolean> => super.existsDelegate('query', 'places', { where }, {}, '{ id }'),
    Date: (where: DateWhereInput): Promise<boolean> => super.existsDelegate('query', 'dates', { where }, {}, '{ id }'),
    Message: (where: MessageWhereInput): Promise<boolean> => super.existsDelegate('query', 'messages', { where }, {}, '{ id }')
  }

  query: Query = {
    users: (args, info): Promise<User[]> => super.delegate('query', 'users', args, {}, info),
    educations: (args, info): Promise<Education[]> => super.delegate('query', 'educations', args, {}, info),
    works: (args, info): Promise<Work[]> => super.delegate('query', 'works', args, {}, info),
    photos: (args, info): Promise<Photo[]> => super.delegate('query', 'photos', args, {}, info),
    locations: (args, info): Promise<Location[]> => super.delegate('query', 'locations', args, {}, info),
    ageFilters: (args, info): Promise<AgeFilter[]> => super.delegate('query', 'ageFilters', args, {}, info),
    notificationSettingses: (args, info): Promise<NotificationSettings[]> => super.delegate('query', 'notificationSettingses', args, {}, info),
    places: (args, info): Promise<Place[]> => super.delegate('query', 'places', args, {}, info),
    dates: (args, info): Promise<Date[]> => super.delegate('query', 'dates', args, {}, info),
    messages: (args, info): Promise<Message[]> => super.delegate('query', 'messages', args, {}, info),
    user: (args, info): Promise<User | null> => super.delegate('query', 'user', args, {}, info),
    location: (args, info): Promise<Location | null> => super.delegate('query', 'location', args, {}, info),
    notificationSettings: (args, info): Promise<NotificationSettings | null> => super.delegate('query', 'notificationSettings', args, {}, info),
    place: (args, info): Promise<Place | null> => super.delegate('query', 'place', args, {}, info),
    date: (args, info): Promise<Date | null> => super.delegate('query', 'date', args, {}, info),
    message: (args, info): Promise<Message | null> => super.delegate('query', 'message', args, {}, info),
    usersConnection: (args, info): Promise<UserConnection> => super.delegate('query', 'usersConnection', args, {}, info),
    educationsConnection: (args, info): Promise<EducationConnection> => super.delegate('query', 'educationsConnection', args, {}, info),
    worksConnection: (args, info): Promise<WorkConnection> => super.delegate('query', 'worksConnection', args, {}, info),
    photosConnection: (args, info): Promise<PhotoConnection> => super.delegate('query', 'photosConnection', args, {}, info),
    locationsConnection: (args, info): Promise<LocationConnection> => super.delegate('query', 'locationsConnection', args, {}, info),
    ageFiltersConnection: (args, info): Promise<AgeFilterConnection> => super.delegate('query', 'ageFiltersConnection', args, {}, info),
    notificationSettingsesConnection: (args, info): Promise<NotificationSettingsConnection> => super.delegate('query', 'notificationSettingsesConnection', args, {}, info),
    placesConnection: (args, info): Promise<PlaceConnection> => super.delegate('query', 'placesConnection', args, {}, info),
    datesConnection: (args, info): Promise<DateConnection> => super.delegate('query', 'datesConnection', args, {}, info),
    messagesConnection: (args, info): Promise<MessageConnection> => super.delegate('query', 'messagesConnection', args, {}, info),
    node: (args, info): Promise<Node | null> => super.delegate('query', 'node', args, {}, info)
  }

  mutation: Mutation = {
    createUser: (args, info): Promise<User> => super.delegate('mutation', 'createUser', args, {}, info),
    createEducation: (args, info): Promise<Education> => super.delegate('mutation', 'createEducation', args, {}, info),
    createWork: (args, info): Promise<Work> => super.delegate('mutation', 'createWork', args, {}, info),
    createPhoto: (args, info): Promise<Photo> => super.delegate('mutation', 'createPhoto', args, {}, info),
    createLocation: (args, info): Promise<Location> => super.delegate('mutation', 'createLocation', args, {}, info),
    createAgeFilter: (args, info): Promise<AgeFilter> => super.delegate('mutation', 'createAgeFilter', args, {}, info),
    createNotificationSettings: (args, info): Promise<NotificationSettings> => super.delegate('mutation', 'createNotificationSettings', args, {}, info),
    createPlace: (args, info): Promise<Place> => super.delegate('mutation', 'createPlace', args, {}, info),
    createDate: (args, info): Promise<Date> => super.delegate('mutation', 'createDate', args, {}, info),
    createMessage: (args, info): Promise<Message> => super.delegate('mutation', 'createMessage', args, {}, info),
    updateUser: (args, info): Promise<User | null> => super.delegate('mutation', 'updateUser', args, {}, info),
    updateLocation: (args, info): Promise<Location | null> => super.delegate('mutation', 'updateLocation', args, {}, info),
    updateNotificationSettings: (args, info): Promise<NotificationSettings | null> => super.delegate('mutation', 'updateNotificationSettings', args, {}, info),
    updatePlace: (args, info): Promise<Place | null> => super.delegate('mutation', 'updatePlace', args, {}, info),
    updateDate: (args, info): Promise<Date | null> => super.delegate('mutation', 'updateDate', args, {}, info),
    updateMessage: (args, info): Promise<Message | null> => super.delegate('mutation', 'updateMessage', args, {}, info),
    deleteUser: (args, info): Promise<User | null> => super.delegate('mutation', 'deleteUser', args, {}, info),
    deleteLocation: (args, info): Promise<Location | null> => super.delegate('mutation', 'deleteLocation', args, {}, info),
    deleteNotificationSettings: (args, info): Promise<NotificationSettings | null> => super.delegate('mutation', 'deleteNotificationSettings', args, {}, info),
    deletePlace: (args, info): Promise<Place | null> => super.delegate('mutation', 'deletePlace', args, {}, info),
    deleteDate: (args, info): Promise<Date | null> => super.delegate('mutation', 'deleteDate', args, {}, info),
    deleteMessage: (args, info): Promise<Message | null> => super.delegate('mutation', 'deleteMessage', args, {}, info),
    upsertUser: (args, info): Promise<User> => super.delegate('mutation', 'upsertUser', args, {}, info),
    upsertLocation: (args, info): Promise<Location> => super.delegate('mutation', 'upsertLocation', args, {}, info),
    upsertNotificationSettings: (args, info): Promise<NotificationSettings> => super.delegate('mutation', 'upsertNotificationSettings', args, {}, info),
    upsertPlace: (args, info): Promise<Place> => super.delegate('mutation', 'upsertPlace', args, {}, info),
    upsertDate: (args, info): Promise<Date> => super.delegate('mutation', 'upsertDate', args, {}, info),
    upsertMessage: (args, info): Promise<Message> => super.delegate('mutation', 'upsertMessage', args, {}, info),
    updateManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyUsers', args, {}, info),
    updateManyEducations: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyEducations', args, {}, info),
    updateManyWorks: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyWorks', args, {}, info),
    updateManyPhotos: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPhotos', args, {}, info),
    updateManyLocations: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyLocations', args, {}, info),
    updateManyAgeFilters: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyAgeFilters', args, {}, info),
    updateManyNotificationSettingses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyNotificationSettingses', args, {}, info),
    updateManyPlaces: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPlaces', args, {}, info),
    updateManyDates: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyDates', args, {}, info),
    updateManyMessages: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyMessages', args, {}, info),
    deleteManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyUsers', args, {}, info),
    deleteManyEducations: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyEducations', args, {}, info),
    deleteManyWorks: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyWorks', args, {}, info),
    deleteManyPhotos: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPhotos', args, {}, info),
    deleteManyLocations: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyLocations', args, {}, info),
    deleteManyAgeFilters: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyAgeFilters', args, {}, info),
    deleteManyNotificationSettingses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyNotificationSettingses', args, {}, info),
    deleteManyPlaces: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPlaces', args, {}, info),
    deleteManyDates: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyDates', args, {}, info),
    deleteManyMessages: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyMessages', args, {}, info)
  }

  subscription: Subscription = {
    user: (args, infoOrQuery): Promise<AsyncIterator<UserSubscriptionPayload>> => super.delegateSubscription('user', args, {}, infoOrQuery),
    education: (args, infoOrQuery): Promise<AsyncIterator<EducationSubscriptionPayload>> => super.delegateSubscription('education', args, {}, infoOrQuery),
    work: (args, infoOrQuery): Promise<AsyncIterator<WorkSubscriptionPayload>> => super.delegateSubscription('work', args, {}, infoOrQuery),
    photo: (args, infoOrQuery): Promise<AsyncIterator<PhotoSubscriptionPayload>> => super.delegateSubscription('photo', args, {}, infoOrQuery),
    location: (args, infoOrQuery): Promise<AsyncIterator<LocationSubscriptionPayload>> => super.delegateSubscription('location', args, {}, infoOrQuery),
    ageFilter: (args, infoOrQuery): Promise<AsyncIterator<AgeFilterSubscriptionPayload>> => super.delegateSubscription('ageFilter', args, {}, infoOrQuery),
    notificationSettings: (args, infoOrQuery): Promise<AsyncIterator<NotificationSettingsSubscriptionPayload>> => super.delegateSubscription('notificationSettings', args, {}, infoOrQuery),
    place: (args, infoOrQuery): Promise<AsyncIterator<PlaceSubscriptionPayload>> => super.delegateSubscription('place', args, {}, infoOrQuery),
    date: (args, infoOrQuery): Promise<AsyncIterator<DateSubscriptionPayload>> => super.delegateSubscription('date', args, {}, infoOrQuery),
    message: (args, infoOrQuery): Promise<AsyncIterator<MessageSubscriptionPayload>> => super.delegateSubscription('message', args, {}, infoOrQuery)
  }
}