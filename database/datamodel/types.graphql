type User {
  id: ID! @unique
  facebookUserId: String! @unique
  name: String!
  first_name: String!
  last_name: String!
  birthday: DateTime
  locale: String!
  education: [Education!]!
  work: [Work!]!
  email: String
  gender: GENDER!
  targetGenders: [GENDER!]!
  photos: [Photo!]!
  bio: String
  location: Location
  lastLogin: DateTime!
  distanceFilter: Int
  ageFilter: AgeFilter
  oneSignalId: String
  notificationSettings: NotificationSettings
  createdAt: DateTime!
  onboarding: Boolean! @default(value: "true")
  hideAge: Boolean! @default(value: "true")
  language: LANGUAGES! @default(value: "EN")
  places: [Place!]!
  reported: [User!]! @relation(name: "ReportedUsers")
  uninterested: [User!]! @relation(name: "UninterestedUsers")
  sentMessages: [Message!]! @relation(name: "SentMessages")
  receivedMessages: [Message!]! @relation(name: "ReceivedMessages")
  sentDates: [Date!]! @relation(name: "SentDates")
  receivedDates: [Date!]! @relation(name: "ReceivedDates")
}

type Education {
  name: String!
  type: String!
}

type Work {
  employer: String!
  location: String!
  position: String!
}

type Photo {
  url: String!
}

type Location {
  id: ID! @unique
  lat: Float!
  lng: Float!
  createdAt: DateTime!
  city: String
  country: String
}

type AgeFilter {
  min: Int!
  max: Int!
}

type NotificationSettings {
  id: ID! @unique
  user: User!
  createdAt: DateTime!
  onInvite: Boolean! @default(value: "true")
  onMessage: Boolean! @default(value: "true")
  onGeneral: Boolean! @default(value: "true")
  onWink: Boolean! @default(value: "true")
  onWinkConfirmation: Boolean! @default(value: "true")
}

type Place {
  id: ID! @unique
  name: String!
  priceRating: Int
  location: Location!
  googlePlacesId: String!
  createdAt: DateTime!
  weight: Int!
  website: String
  phone: String
  address: String
  openingHours: [String!]!
  types: [String!]!
  fromGoogle: Boolean
  state: String
  lastGoogleUpdate: DateTime
  curatedFields: [String!]!
  description: String
  detailsFetched: Boolean! @default(value: "false")
  users: [User!]!
}

type Date {
  id: ID! @unique
  inviter: User! @relation(name: "SentDates")
  invitee: User! @relation(name: "ReceivedDates")
  place: Place
  status: DATE_STATUS! @default(value: "PENDING")
  createdAt: DateTime!
  isPaying: Boolean
  seen: Boolean! @default(value: "false")
  isCommonPlace: Boolean
  requestingChat: Boolean! @default(value: "false")
  inviterReadMessage: Boolean! @default(value: "false")
  inviteeReadMessage: Boolean! @default(value: "false")
}

type Message {
  id: ID! @unique
  createdAt: DateTime!
  from: User! @relation(name: "SentMessages")
  to: User! @relation(name: "ReceivedMessages")
  deliveredAt: DateTime!
  readAt: DateTime!
  date: Date
}
